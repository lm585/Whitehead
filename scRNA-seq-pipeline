vi refdata-cellranger-GRCh38-3.0.0/star/genomeParameters.txt
### STAR   --runMode genomeGenerate   --runThreadN 1   --genomeDir /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/star   --genomeFastaFiles /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/fasta/genome.fa      --genomeSAindexNbases 14   --genomeChrBinNbits 18   --genomeSAsparseD 3   --limitGenomeGenerateRAM 17179869184   --sjdbGTFfile /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/genes/genes.gtf
versionGenome   20201
genomeFastaFiles        /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/fasta/genome.fa
genomeSAindexNbases     14  
genomeChrBinNbits       18  
genomeSAsparseD 3
sjdbOverhang    100 
sjdbFileChrStartEnd     -   
sjdbGTFfile     /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/genes/genes.gtf
sjdbGTFchrPrefix        -   
sjdbGTFfeatureExon      exon
sjdbGTFtagExonParentTranscript  transcript_id
sjdbGTFtagExonParentGene        gene_id
sjdbInsertSave  Basic

cellranger6 count --id=run_count_1kpbmcs --fastqs=/lab/solexa_page/linyong/run_cellranger_count/pbmc_1k_v3_fastqs --sample=pbmc_1k_v3 --transcriptome=/lab/solexa_page/linyong/run_cellranger_count/refdata-cellranger-GRCh38-3.0.0

### Step 1:
### You had fastq files for each scRNA library. To generate single cell feature (gene) counts for a single library, run cellranger count. You can set the parameter --expect-cells=10000 and the option â€“nosecondary when running the count command.
### 
### Run cellranger count for each library. If you have 10 libraries, you need to run 10 times with 10 outputs. Often, one sample (or one donor) is one library.
### 
### Please note that, by default, --include-introns option is turned off, meaning that intronic reads were excluded from the UMI counting.
### 
### Step 2:
### Step1 will generate filtered_feature_bc_matrix directory, among other outputs, for each library. Then use an R package Seurat. The following web site gives a nice documentation to merge multiple library outputs from cellranger into a single Seurat object. ### 
### https://satijalab.org/seurat/archive/v3.1/merge_vignette.html
### 
### 
### 
### With the single Seurat object generated, you can continue the downstream traditional analysis with scRNA-seq data.

ls run_count_1kpbmcs/outs/filter*matrix/ -lh
total 12M
-rw-r--r-- 1 linyong input 6.9K Jan 22 21:03 barcodes.tsv.gz
-rw-r--r-- 1 linyong input 298K Jan 22 21:03 features.tsv.gz
-rw-r--r-- 1 linyong input 9.0M Jan 22 21:03 matrix.mtx.gz

pbmc.data <- Read10X(data.dir = "filtered_feature_bc_matrix")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
dim(pbmc)
##[1] 15287  1183
###no filtering, [1] 33538  1225 
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 10)
#                    orig.ident nCount_RNA nFeature_RNA percent.mt
# AAACCCAAGGAGAGTA-1     pbmc3k       8509         2660  10.706311
# AAACGCTTCAGCCCAG-1     pbmc3k       5572         1826   7.914573
# AAAGAACAGACGACTG-1     pbmc3k       4318         1574   6.160259
# AAAGAACCAATGGCAG-1     pbmc3k       2788         1236   5.989957
# AAAGAACGTCTGCAAT-1     pbmc3k       6662         1854   6.604623
# AAAGGATAGTAGACAT-1     pbmc3k       8942         2062   7.906509

# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.

plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

###based on plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 20)
dim(pbmc)
# [1] 15287  1115 (94% of 1183 cells)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)

pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2

all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)

pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
DimPlot(pbmc, reduction = "pca")
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
#Number of communities: 8
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
DimPlot(pbmc, reduction = "umap", label=T)
saveRDS(pbmc, file = "../output/pbmc_tutorial.rds")

> install.packages("https://seurat.nygenome.org/src/contrib/ifnb.SeuratData_3.0.0.tar.gz", repos = NULL, type = "source")
> library(ifnb.SeuratData)
> LoadData("ifnb")

## Not run:
if (requireNamespace(Seurat, quietly = TRUE)) {
  url <- 'https://www.dropbox.com/s/79q6dttg8yl20zg/immune_alignment_expression_matrices.zip?dl=1'
  dl.name <- gsub(pattern = '\\?dl=1', replacement = '', x = basename(path = url))
  curl::curl_download(url = url, destfile = dl.name)
  unzip(zipfile = dl.name, exdir = tools::file_path_sans_ext(x = dl.name))
  ctrl.data <- read.table(file = file.path(tools::file_path_sans_ext(x = dl.name), 'immune_control_expression_matrix.txt.gz'), sep = '\t')
  stim.data <- read.table(file = file.path(tools::file_path_sans_ext(x = dl.name), 'immune_stimulated_expression_matrix.txt.gz'), sep = '\t')
  ctrl <- Seurat::CreateSeuratObject(counts = ctrl.data, project = 'IMMUNE_CTRL', min.cells = 5)
  ctrl$stim <- 'CTRL'
  ctrl <- subset(x = ctrl, subset = nFeature_RNA > 500)   
  stim <- Seurat::CreateSeuratObject(counts = stim.data, project = 'IMMUNE_STIM', min.cells = 5)
  stim$stim <- 'STIM'
  stim <- subset(x = stim, subset = nFeature_RNA > 500)
  ifnb <- merge(x = ctrl, y = stim) 
  Seurat::Project(object = ifnb) <- 'ifnb'
  # Annotations come from Seurat's stimulated/control guided clustering without the Mono/Mk doublets
  # https://satijalab.org/seurat/v3.0/immune_alignment.html
  annotations <- readRDS(file = system.file('extdata/annotations/annotations.Rds', package = 'ifnb.SeuratData'))
  ifnb <- Seurat::AddMetaData(object = ifnb, metadata = annotations)
  # Clean up downlaoded files
  file.remove(dl.name)
  unlink(x = tools::file_path_sans_ext(x = dl.name), recursive = TRUE)
}

## End(Not run)

library(SeuratData)
InstallData('pbmc3k')
  ..@ meta.data   :'data.frame':        2700 obs. of  4 variables:
  .. ..$ orig.ident        : Factor w/ 1 level "pbmc3k": 1 1 1 1 1 1 1 1 1 1 ...
  .. ..$ nCount_RNA        : num [1:2700] 2419 4903 3147 2639 980 ...
  .. ..$ nFeature_RNA      : int [1:2700] 779 1352 1129 960 521 781 782 790 532 550 ...
  .. ..$ seurat_annotations: Factor w/ 9 levels "Naive CD4 T",..: 2 4 2 3 7 2 5 5 1 6 ...
pbmc <- pbmc3k
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono",
    "NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()

> cluster5.markers <- FindMarkers(pbmc, ident.1 = 0, ident.2 = c(2), min.pct = 0.25)
  |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s
> head(cluster5.markers, n = 20)
                p_val avg_log2FC pct.1 pct.2    p_val_adj
S100A4   1.090806e-47 -1.0891751 0.700 0.929 1.495931e-43
MALAT1   2.781540e-37  0.5023381 1.000 1.000 3.814604e-33
B2M      9.190424e-32 -0.3039140 1.000 1.000 1.260375e-27
RPL32    1.601655e-29  0.3089689 0.999 1.000 2.196510e-25
VIM      4.413449e-28 -0.6620801 0.810 0.944 6.052605e-24
ACTB     3.144174e-27 -0.5397110 0.984 1.000 4.311920e-23
S100A11  2.612274e-25 -0.8518047 0.289 0.621 3.582473e-21

write.table( Idents(pbmc), "temp.txt", quote=F, sep="\t")
cp -i temp.txt   pbmc3k.clustering.annot.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine  temp.txt      pbmc3k.azimuth.anno.txt  out
paste  temp.txt    out | cut -f 3,12,13 > temp.2.txt

> azh <- read.delim("temp.2.txt")
> pbmc$cell.azh <- azh$cell
> pbmc$azh.annot <- azh$predicted.celltype.l2
> pbmc$azh.annot.score <- azh$predicted.celltype.l2.score
> t <- data.frame(pbmc$nCount_RNA, pbmc$cell.azh)
> i = 2700
> rownames(t)[i] == t$pbmc.cell.azh[i]
[1] TRUE
> DimPlot(pbmc, reduction = "umap", label = F, pt.size = 0.5, group.by="azh.annot", cols=c(rep("gray", 5), "red", "green", "orange", "blue",  rep("gray", 15)))
> cluster5.markers <- FindMarkers(pbmc, ident.1 = "CD4 Naive", ident.2 = "CD4 TCM", group.by="azh.annot", min.pct = 0.25)
> write.table(cluster5.markers, "temp.3.txt", quote=F, sep="\t")

#############################################################################
###SingleR
> library(celldex)
> ref.data <- MonacoImmuneData()
> unique(ref.data$label.main)
 [1] "CD8+ T cells"    "T cells"         "CD4+ T cells"    "Progenitors"     "B cells"         "Monocytes"
 [7] "NK cells"        "Dendritic cells" "Neutrophils"     "Basophils"
> unique(ref.data$label.fine)
 [1] "Naive CD8 T cells"             "Central memory CD8 T cells"    "Effector memory CD8 T cells"
 [4] "Terminal effector CD8 T cells" "MAIT cells"                    "Vd2 gd T cells"
 [7] "Non-Vd2 gd T cells"            "Follicular helper T cells"     "T regulatory cells"
[10] "Th1 cells"                     "Th1/Th17 cells"                "Th17 cells"
[13] "Th2 cells"                     "Naive CD4 T cells"             "Progenitor cells"
[16] "Naive B cells"                 "Non-switched memory B cells"   "Exhausted B cells"
[19] "Switched memory B cells"       "Plasmablasts"                  "Classical monocytes"
[22] "Intermediate monocytes"        "Non classical monocytes"       "Natural killer cells"
[25] "Plasmacytoid dendritic cells"  "Myeloid dendritic cells"       "Low-density neutrophils"
[28] "Low-density basophils"         "Terminal effector CD4 T cells"

library(SingleR)
library(SeuratData)
InstallData('pbmc3k')
pbmc <- pbmc3k
m <- as.matrix(pbmc@assays$RNA@counts)
summary(m[,1:12])
ref.data <- celldex::HumanPrimaryCellAtlasData()
ref.data
# class: SummarizedExperiment
# dim: 19363 713
pred <- SingleR(test = m , ref = ref.data,  labels =  ref.data$label.fine, assay.type.test=1)
write.table(data.frame(cell=colnames(m), label= pred$labels), "temp2", quote=F, sep = "\t")
vi temp2
cut -f 2,3 temp2 > temp2.2
mv -i temp2.2 pbmc3k.CellAtlas.singleR.annot.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine         pbmc3k.clustering.annot.txt pbmc3k.CellAtlas.singleR.annot.txt out
