vi refdata-cellranger-GRCh38-3.0.0/star/genomeParameters.txt
### STAR   --runMode genomeGenerate   --runThreadN 1   --genomeDir /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/star   --genomeFastaFiles /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/fasta/genome.fa      --genomeSAindexNbases 14   --genomeChrBinNbits 18   --genomeSAsparseD 3   --limitGenomeGenerateRAM 17179869184   --sjdbGTFfile /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/genes/genes.gtf
versionGenome   20201
genomeFastaFiles        /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/fasta/genome.fa
genomeSAindexNbases     14  
genomeChrBinNbits       18  
genomeSAsparseD 3
sjdbOverhang    100 
sjdbFileChrStartEnd     -   
sjdbGTFfile     /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/genes/genes.gtf
sjdbGTFchrPrefix        -   
sjdbGTFfeatureExon      exon
sjdbGTFtagExonParentTranscript  transcript_id
sjdbGTFtagExonParentGene        gene_id
sjdbInsertSave  Basic

cellranger6 count --id=run_count_1kpbmcs --fastqs=/lab/solexa_page/linyong/run_cellranger_count/pbmc_1k_v3_fastqs --sample=pbmc_1k_v3 --transcriptome=/lab/solexa_page/linyong/run_cellranger_count/refdata-cellranger-GRCh38-3.0.0

### Step 1:
### You had fastq files for each scRNA library. To generate single cell feature (gene) counts for a single library, run cellranger count. You can set the parameter --expect-cells=10000 and the option â€“nosecondary when running the count command.
### 
### Run cellranger count for each library. If you have 10 libraries, you need to run 10 times with 10 outputs. Often, one sample (or one donor) is one library.
### 
### Please note that, by default, --include-introns option is turned off, meaning that intronic reads were excluded from the UMI counting.
### 
### Step 2:
### Step1 will generate filtered_feature_bc_matrix directory, among other outputs, for each library. Then use an R package Seurat. The following web site gives a nice documentation to merge multiple library outputs from cellranger into a single Seurat object. ### 
### https://satijalab.org/seurat/archive/v3.1/merge_vignette.html
### 
### 
### 
### With the single Seurat object generated, you can continue the downstream traditional analysis with scRNA-seq data.

ls run_count_1kpbmcs/outs/filter*matrix/ -lh
total 12M
-rw-r--r-- 1 linyong input 6.9K Jan 22 21:03 barcodes.tsv.gz
-rw-r--r-- 1 linyong input 298K Jan 22 21:03 features.tsv.gz
-rw-r--r-- 1 linyong input 9.0M Jan 22 21:03 matrix.mtx.gz

pbmc.data <- Read10X(data.dir = "filtered_feature_bc_matrix")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
dim(pbmc)
##[1] 15287  1183
###no filtering, [1] 33538  1225 
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 10)
#                    orig.ident nCount_RNA nFeature_RNA percent.mt
# AAACCCAAGGAGAGTA-1     pbmc3k       8509         2660  10.706311
# AAACGCTTCAGCCCAG-1     pbmc3k       5572         1826   7.914573
# AAAGAACAGACGACTG-1     pbmc3k       4318         1574   6.160259
# AAAGAACCAATGGCAG-1     pbmc3k       2788         1236   5.989957
# AAAGAACGTCTGCAAT-1     pbmc3k       6662         1854   6.604623
# AAAGGATAGTAGACAT-1     pbmc3k       8942         2062   7.906509

# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.

plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

###based on plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 20)
dim(pbmc)
# [1] 15287  1115 (94% of 1183 cells)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)

pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2

all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)

pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
DimPlot(pbmc, reduction = "pca")
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
#Number of communities: 8
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
DimPlot(pbmc, reduction = "umap", label=T)
saveRDS(pbmc, file = "../output/pbmc_tutorial.rds")

> install.packages("https://seurat.nygenome.org/src/contrib/ifnb.SeuratData_3.0.0.tar.gz", repos = NULL, type = "source")
> library(ifnb.SeuratData)
> LoadData("ifnb")

## Not run:
if (requireNamespace(Seurat, quietly = TRUE)) {
  url <- 'https://www.dropbox.com/s/79q6dttg8yl20zg/immune_alignment_expression_matrices.zip?dl=1'
  dl.name <- gsub(pattern = '\\?dl=1', replacement = '', x = basename(path = url))
  curl::curl_download(url = url, destfile = dl.name)
  unzip(zipfile = dl.name, exdir = tools::file_path_sans_ext(x = dl.name))
  ctrl.data <- read.table(file = file.path(tools::file_path_sans_ext(x = dl.name), 'immune_control_expression_matrix.txt.gz'), sep = '\t')
  stim.data <- read.table(file = file.path(tools::file_path_sans_ext(x = dl.name), 'immune_stimulated_expression_matrix.txt.gz'), sep = '\t')
  ctrl <- Seurat::CreateSeuratObject(counts = ctrl.data, project = 'IMMUNE_CTRL', min.cells = 5)
  ctrl$stim <- 'CTRL'
  ctrl <- subset(x = ctrl, subset = nFeature_RNA > 500)   
  stim <- Seurat::CreateSeuratObject(counts = stim.data, project = 'IMMUNE_STIM', min.cells = 5)
  stim$stim <- 'STIM'
  stim <- subset(x = stim, subset = nFeature_RNA > 500)
  ifnb <- merge(x = ctrl, y = stim) 
  Seurat::Project(object = ifnb) <- 'ifnb'
  # Annotations come from Seurat's stimulated/control guided clustering without the Mono/Mk doublets
  # https://satijalab.org/seurat/v3.0/immune_alignment.html
  annotations <- readRDS(file = system.file('extdata/annotations/annotations.Rds', package = 'ifnb.SeuratData'))
  ifnb <- Seurat::AddMetaData(object = ifnb, metadata = annotations)
  # Clean up downlaoded files
  file.remove(dl.name)
  unlink(x = tools::file_path_sans_ext(x = dl.name), recursive = TRUE)
}

## End(Not run)

library(SeuratData)
InstallData('pbmc3k')
  ..@ meta.data   :'data.frame':        2700 obs. of  4 variables:
  .. ..$ orig.ident        : Factor w/ 1 level "pbmc3k": 1 1 1 1 1 1 1 1 1 1 ...
  .. ..$ nCount_RNA        : num [1:2700] 2419 4903 3147 2639 980 ...
  .. ..$ nFeature_RNA      : int [1:2700] 779 1352 1129 960 521 781 782 790 532 550 ...
  .. ..$ seurat_annotations: Factor w/ 9 levels "Naive CD4 T",..: 2 4 2 3 7 2 5 5 1 6 ...
pbmc <- pbmc3k
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono",
    "NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()

> cluster5.markers <- FindMarkers(pbmc, ident.1 = 0, ident.2 = c(2), min.pct = 0.25)
  |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s
> head(cluster5.markers, n = 20)
                p_val avg_log2FC pct.1 pct.2    p_val_adj
S100A4   1.090806e-47 -1.0891751 0.700 0.929 1.495931e-43
MALAT1   2.781540e-37  0.5023381 1.000 1.000 3.814604e-33
B2M      9.190424e-32 -0.3039140 1.000 1.000 1.260375e-27
RPL32    1.601655e-29  0.3089689 0.999 1.000 2.196510e-25
VIM      4.413449e-28 -0.6620801 0.810 0.944 6.052605e-24
ACTB     3.144174e-27 -0.5397110 0.984 1.000 4.311920e-23
S100A11  2.612274e-25 -0.8518047 0.289 0.621 3.582473e-21

write.table( Idents(pbmc), "temp.txt", quote=F, sep="\t")
cp -i temp.txt   pbmc3k.clustering.annot.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine  temp.txt      pbmc3k.azimuth.anno.txt  out
paste  temp.txt    out | cut -f 3,12,13 > temp.2.txt

> azh <- read.delim("temp.2.txt")
> pbmc$cell.azh <- azh$cell
> pbmc$azh.annot <- azh$predicted.celltype.l2
> pbmc$azh.annot.score <- azh$predicted.celltype.l2.score
> t <- data.frame(pbmc$nCount_RNA, pbmc$cell.azh)
> i = 2700
> rownames(t)[i] == t$pbmc.cell.azh[i]
[1] TRUE
> DimPlot(pbmc, reduction = "umap", label = F, pt.size = 0.5, group.by="azh.annot", cols=c(rep("gray", 5), "red", "green", "orange", "blue",  rep("gray", 15)))
> cluster5.markers <- FindMarkers(pbmc, ident.1 = "CD4 Naive", ident.2 = "CD4 TCM", group.by="azh.annot", min.pct = 0.25)
> write.table(cluster5.markers, "temp.3.txt", quote=F, sep="\t")

#############################################################################
###SingleR
> library(celldex)
> ref.data <- MonacoImmuneData()
> unique(ref.data$label.main)
 [1] "CD8+ T cells"    "T cells"         "CD4+ T cells"    "Progenitors"     "B cells"         "Monocytes"
 [7] "NK cells"        "Dendritic cells" "Neutrophils"     "Basophils"
> unique(ref.data$label.fine)
 [1] "Naive CD8 T cells"             "Central memory CD8 T cells"    "Effector memory CD8 T cells"
 [4] "Terminal effector CD8 T cells" "MAIT cells"                    "Vd2 gd T cells"
 [7] "Non-Vd2 gd T cells"            "Follicular helper T cells"     "T regulatory cells"
[10] "Th1 cells"                     "Th1/Th17 cells"                "Th17 cells"
[13] "Th2 cells"                     "Naive CD4 T cells"             "Progenitor cells"
[16] "Naive B cells"                 "Non-switched memory B cells"   "Exhausted B cells"
[19] "Switched memory B cells"       "Plasmablasts"                  "Classical monocytes"
[22] "Intermediate monocytes"        "Non classical monocytes"       "Natural killer cells"
[25] "Plasmacytoid dendritic cells"  "Myeloid dendritic cells"       "Low-density neutrophils"
[28] "Low-density basophils"         "Terminal effector CD4 T cells"

library(SingleR)
library(SeuratData)
InstallData('pbmc3k')
pbmc <- pbmc3k
m <- as.matrix(pbmc@assays$RNA@counts)
summary(m[,1:12])
ref.data <- celldex::HumanPrimaryCellAtlasData()
ref.data
# class: SummarizedExperiment
# dim: 19363 713
pred <- SingleR(test = m , ref = ref.data,  labels =  ref.data$label.fine, assay.type.test=1)
write.table(data.frame(cell=colnames(m), label= pred$labels), "temp2", quote=F, sep = "\t")
vi temp2
cut -f 2,3 temp2 > temp2.2
mv -i temp2.2 pbmc3k.CellAtlas.singleR.annot.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine         pbmc3k.clustering.annot.txt pbmc3k.CellAtlas.singleR.annot.txt out

/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine   pbmc3k.clustering.annot.txt pbmc3k.Monaco.singleR.annot.txt  out
paste  pbmc3k.clustering.annot.txt out > temp.2
cat temp.2 | cut -f 2,4 | sort | uniq -c | sed 's/^ *//' | sed 's/  */\t/' | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 == "Naive CD4 T" ' | sort -nr | cut -f 1,3 | sed 's/^/ /'

pbmc.avg.exp <- AverageExpression(pbmc, group.by="ident", slot="data", verbose=T)
dim(pbmc.avg.exp$RNA)
###[1] 13714-RNA-features     9-clusters
summary(pbmc.avg.exp$RNA)
       0                  1                  2                   3                   4                  5
 Min.   :  0.0000   Min.   :  0.0000   Min.   :  0.00000   Min.   :  0.00000   Min.   :  0.0000   Min.   :  0.0000
 1st Qu.:  0.0179   1st Qu.:  0.0154   1st Qu.:  0.01832   1st Qu.:  0.01731   1st Qu.:  0.0165   1st Qu.:  0.0142
 Median :  0.0740   Median :  0.0686   Median :  0.07907   Median :  0.08325   Median :  0.0865   Median :  0.0678
 Mean   :  0.7292   Mean   :  0.7292   Mean   :  0.72918   Mean   :  0.72918   Mean   :  0.7292   Mean   :  0.7292
10000/13714
####[1] 0.7291819
ref.data <- MonacoImmuneData()
pred <- SingleR(test = pbmc.avg.exp$RNA , ref = ref.data,  labels =  ref.data$label.fine, assay.type.test=1)
> data.frame(pred$first.labels, pred$labels, pred$pruned.labels)
        pred.first.labels             pred.labels      pred.pruned.labels
1       Naive CD4 T cells               Th1 cells               Th1 cells
2     Classical monocytes     Classical monocytes     Classical monocytes
3               Th2 cells          Th1/Th17 cells          Th1/Th17 cells
4           Naive B cells           Naive B cells           Naive B cells
5          Vd2 gd T cells          Vd2 gd T cells          Vd2 gd T cells
6  Intermediate monocytes  Intermediate monocytes  Intermediate monocytes
7    Natural killer cells    Natural killer cells    Natural killer cells
8 Myeloid dendritic cells Myeloid dendritic cells Myeloid dendritic cells
9  Intermediate monocytes        Progenitor cells        Progenitor cells

###################################################################
###clustering on CD4/CD8 cells only
> pbmc.cd4.cd8 <- pbmc[,pbmc$RNA_snn_res.0.5 %in% c(0,2,4)]
> pbmc.cd4.cd8
An object of class Seurat
13714 features across 1502 samples within 1 assay
Active assay: RNA (13714 features, 2000 variable features)
 2 dimensional reductions calculated: pca, umap
> 696 + 467 + 339
[1] 1502

> pbmc.cd4.cd8 <- FindVariableFeatures(pbmc.cd4.cd8, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(pbmc.cd4.cd8)
pbmc.cd4.cd8 <- ScaleData(pbmc.cd4.cd8, features = all.genes)
pbmc.cd4.cd8 <- RunPCA(pbmc.cd4.cd8, features = VariableFeatures(object = pbmc.cd4.cd8))
ElbowPlot(pbmc.cd4.cd8)
pbmc.cd4.cd8 <- FindNeighbors(pbmc.cd4.cd8, dims = 1:10)
pbmc.cd4.cd8 <- FindClusters(pbmc.cd4.cd8, resolution = 0.5)
pbmc.cd4.cd8 <- RunUMAP(pbmc.cd4.cd8, dims = 1:10)
DimPlot(pbmc.cd4.cd8, reduction = "umap")
write.table( Idents(pbmc.cd4.cd8), "temp.txt", quote=F, sep="\t")
vi temp.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine   temp.txt  pbmc3k.azimuth.anno.txt   out

https://satijalab.org/seurat/articles/integration_introduction.html
###copied from above website
###14053 features across 13999 samples within 1 assay

library(Seurat)
library(SeuratData)
library(patchwork)
# install dataset
InstallData("ifnb")
# load dataset
LoadData("ifnb")

# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")

# normalize and identify variable features for each dataset independently
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
    x <- NormalizeData(x)
    x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})

# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = ifnb.list)
immune.anchors <- FindIntegrationAnchors(object.list = ifnb.list, anchor.features = features)
# this command creates an 'integrated' data assay
immune.combined <- IntegrateData(anchorset = immune.anchors)
# specify that we will perform downstream analysis on the corrected data note that the
# original unmodified data still resides in the 'RNA' assay
DefaultAssay(immune.combined) <- "integrated"

# Run the standard workflow for visualization and clustering
immune.combined <- ScaleData(immune.combined, verbose = FALSE)
immune.combined <- RunPCA(immune.combined, npcs = 30, verbose = FALSE)
immune.combined <- RunUMAP(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindNeighbors(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindClusters(immune.combined, resolution = 0.5) 
###15 clusters, 
#1799 CD4 Memory T
#2525 CD4 Naive T
# 779 CD8 T

DimPlot(immune.combined, reduction = "umap", label = TRUE, repel = TRUE)
FeaturePlot(immune.combined, features = c("CD3D", "SELL", "CREM", "CD8A", "GNLY", "CD79A", "FCGR3A",
    "CCL2", "PPBP"), min.cutoff = "q9")
    
####azimuth query data mapped to reference
library(Seurat)
library(SeuratDisk)
library(ggplot2)
library(patchwork)

setwd("/Users/linyongmao/Documents/scRNA-seq-1")
reference <- LoadH5Seurat("./pbmc_multimodal.h5seurat")
DimPlot(object = reference, reduction = "wnn.umap", group.by = "celltype.l2", label = TRUE, label.size = 3, repel = TRUE) + NoLegend()
library(SeuratData)
InstallData("ifnb")
LoadData("ifnb")
#########
ifnb1 <- subset( ifnb, subset= stim == "STIM" )

pbmc3k <- SCTransform(ifnb1, verbose = T)
###Set default assay to SCT
anchors <- FindTransferAnchors(
  reference = reference,
  query = pbmc3k,
  normalization.method = "SCT",
  reference.reduction = "spca",
  dims = 1:50
)
### Normalizing query using reference SCT model
### Projecting cell embeddings
### Finding neighborhoods
### Finding anchors
# [1] "CTRL" 6548 samples 
#     "STIM" 7451 samples
###ctrl         Found 3728 anchors
###STIM         Found 971 anchors
pbmc3k <- MapQuery(
  anchorset = anchors,
  query = pbmc3k,
  reference = reference,
  refdata = list(
    celltype.l1 = "celltype.l1",
    celltype.l2 = "celltype.l2",
    predicted_ADT = "ADT"
  ),
  reference.reduction = "spca",
  reduction.model = "wnn.umap"
)

DimPlot(pbmc3k, reduction = "ref.umap", group.by = "predicted.celltype.l2", label = TRUE, label.size = 3 ,repel = TRUE)
FeaturePlot(pbmc3k, features = c("CD4 Naive", "CD4 TCM"),  reduction = "ref.umap", cols = c("lightgrey", "darkred"), ncol = 2) & theme(plot.title = element_text(size = 10))
FeaturePlot(pbmc3k, features = c("CD8 Naive", "CD8 TCM", "CD8 TEM"),  reduction = "ref.umap", cols = c("lightgrey", "darkred"), ncol = 3) & theme(plot.title = element_text(size = 10))

###### gene expression per cell type per donor, azimuth ref data set
> ref.count <- CreateSeuratObject(counts = reference@assays$SCT@counts, meta.data = reference@meta.data)
> ref.1 <- subset(ref.count, subset = donor == "P1")
> ref.1 <- NormalizeData(ref.1, normalization.method = "LogNormalize", scale.factor = 10000)
> ref.1.avg <- AverageExpression(ref.1, group.by="celltype.l2", slot="data", verbose=T)
> dim(ref.1.avg$RNA)
###20729    31
> summary(ref.1.avg$RNA)
> write.table(ref.1.avg$RNA, "temp-P1.txt", quote = F, sep="\t")
> t1 = unique(ref.count$donor)
for(i in 1:length(t1)) {
 print(t1[i])
 ref.1 <- subset(ref.count, subset = donor == t1[i])
 ref.1 <- NormalizeData(ref.1, normalization.method = "LogNormalize", scale.factor = 10000)
 ref.1.avg <- AverageExpression(ref.1, group.by="celltype.l2", slot="data", verbose=T)
 dim(ref.1.avg$RNA)
 f <- paste("temp", t1[i], sep = "-")
 print(f)
 write.table(ref.1.avg$RNA, f, quote = F, sep="\t")
 }

#
ls temp-P[1-8] | while read ll
do
 cat "$ll" | awk 'NR == 1 ' | sed 's/^/gene     /' > "$ll".head
 cat "$ll" | awk 'NR > 1' >> "$ll".head
done

paste temp-P1.head temp-P2.head    temp-P3.head    temp-P4.head    temp-P5.head    temp-P6.head    temp-P7.head temp-P8.head > temp.1.txt
% cat temp-scr2
#
cat temp.1.txt | awk 'BEGIN {FS = "\t"; OFS = "\t"}
 {
  for(i = 33; i <= NF; i = i+32)
  {
   if($1 == $i)
     print "eq";
   else
     print "not";
  }
  print "line"
 }'

% bash temp-scr2 |  uniq -c | sort | uniq -c
#20730    1 line
#20730    7 eq
mv -i temp.1.txt azimuth.8donors.celltype.avg-expression.txt
> par(pin=c(12,3))
> boxplot(as.numeric( t3$V2) ~ t3$V1, las =2, xlab = "")

t1 <- read.delim("azimuth.8donors.celltype.avg-expression.txt", header = F)
par(pin=c(12,3))

gene = "CD8A"
t2 <- as.data.frame( t(rbind(t1[1,], t1[t1$V1 == gene,])))
t3 <- t2[ t2[,1] != "gene",]
boxplot( as.numeric(t3[,2]) ~ t3[,1], las=2, xlab = "")
abline(h = seq(0,200,1), lty = 5, lwd = 0.5, col = "gray")
tit <- paste(gene, "average expression per donor", sep = " ")
title(main = tit, cex = 0.5)

#############################################################################
### mouse scRNA-seq microglia
ls *mtx.gz | sed 's/-filtered-matrix.mtx.gz//' | while read dir
do
 mkdir dir-"$dir"
 ls "$dir"*
 mv "$dir"* dir-"$dir"
done

mv *-barcodes.tsv.gz barcodes.tsv.gz
mv *features.tsv.gz features.tsv.gz
mv *matrix.mtx.gz matrix.mtx.gz

ls  | grep dir- | grep -v dir-GSM4039241_f-ctrl-1 | while read dir
do
 cd "$dir"
 mv *-barcodes.tsv.gz barcodes.tsv.gz
 mv *features.tsv.gz features.tsv.gz
 mv *matrix.mtx.gz matrix.mtx.gz

 cd ..
done

ls | grep dir-GSM | while read dir
do
 echo -n "$dir\t"
 echo "$dir" | sed 's/dir-GSM[0-9]*_//'
done

cat nameDir-id 
dir-GSM4039241_f-ctrl-1	f-ctrl-1
dir-GSM4039242_f-ctrl-2	f-ctrl-2
dir-GSM4039243_f-tumor-1	f-tumor-1
dir-GSM4039244_f-tumor-2	f-tumor-2
dir-GSM4039245_m-ctrl-1	m-ctrl-1
dir-GSM4039246_m-ctrl-2	m-ctrl-2
dir-GSM4039247_m-tumor-1	m-tumor-1
dir-GSM4039248_m-tumor-2	m-tumor-2

setwd("/Users/linyongmao/Documents/microglia-mouse")

t1 <- read.delim("nameDir-id", header=F)
ss <- list()
for(i in 1:dim(t1)[1])
{
 mic.data <- Read10X(data.dir = t1[i, 1])
 ss[[i]] <- CreateSeuratObject(counts = mic.data, project = t1[i, 2], min.cells = 5)
}

t2 <- ss[[2]]
for(i in 3:8)
{
 t2 <- c(t2, ss[[i]])
}

mg <- merge(ss[[1]], y = t2, project = "microglia")
Warning message:
#In CheckDuplicateCellNames(object.list = objects) :
#  Some cell names are duplicated across objects provided. Renaming to enforce unique cell names.

mg
# An object of class Seurat 
# 14618 features across 41059 samples within 1 assay 
# Active assay: RNA (14618 features, 0 variable features)

for(i in 1:8)
{
 print(ss[[i]])
}
 
-rw-r--r--@ 1 linyongmao  staff   1.7M Jul  4 14:26 Mouse_ENSEMBL_Gene_ID_Human_Orthologs_MSigDB.v7.4.chip
2022 July downloaded

-rw-r--r--  1 linyongmao  staff   765M Jul  4 13:58 gencode.vM10.annotation.gtf
Release M10 (GRCm38.p4)
https://www.gencodegenes.org/mouse/release_M10.html
2022 July downloaded

#13 MT protein coding genes
mg[["percent.mt"]] <- PercentageFeatureSet(mg, pattern = "^mt-")
> # Visualize QC metrics as a violin plot
> VlnPlot(mg, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
> plot(mg$nCount_RNA, mg$percent.mt, ylim=c(0,25), cex=0.3 )
mg[ , mg$percent.mt < 10]
> plot(mg$nCount_RNA, mg$nFeature_RNA,  cex=0.3 )
> abline(h = seq(0,10000,500), lty = 5, lwd = 0.5, col = "gray")
> abline(v = seq(0,50000,5000), lty = 5, lwd = 0.5, col = "gray")
> mg[, mg$nFeature_RNA > 200 & mg$nFeature_RNA < 3000 & mg$percent.mt < 5 ]
> mg[, mg$nFeature_RNA > 500 & mg$nFeature_RNA < 3000 & mg$percent.mt < 5 ]

mg.1 <- mg[, mg$nFeature_RNA > 200 & mg$nFeature_RNA < 3000 & mg$percent.mt < 5 ]
## 14618 features across 40401 samples within 1 assay
ifnb.list <- SplitObject(mg.1, split.by = "orig.ident")
# normalize and identify variable features for each dataset independently
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
    x <- NormalizeData(x)
    x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = ifnb.list)
immune.anchors <- FindIntegrationAnchors(object.list = ifnb.list, anchor.features = features)
##Retained 5826 anchors
##  |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=59m 29s
# this command creates an 'integrated' data assay
immune.combined <- IntegrateData(anchorset = immune.anchors)
# specify that we will perform downstream analysis on the corrected data note that the
# original unmodified data still resides in the 'RNA' assay
DefaultAssay(immune.combined) <- "integrated"

# Run the standard workflow for visualization and clustering
immune.combined <- ScaleData(immune.combined, verbose = FALSE)
immune.combined <- RunPCA(immune.combined, npcs = 30, verbose = TRUE)
immune.combined <- RunUMAP(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindNeighbors(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindClusters(immune.combined, resolution=0.3)
# Number of nodes: 40401
# Number of edges: 1652874
# Number of communities: 19

DimPlot(immune.combined, reduction = "umap", label = TRUE, repel = TRUE)

> saveRDS(immune.anchors, file="anchors.rds")
> DefaultAssay(immune.combined) <- "RNA"
>  ref.1.avg <- AverageExpression(immune.combined, group.by="integrated_snn_res.0.1", slot="data", verbose=T)
>  write.table(ref.1.avg$RNA, "avg-exp-allgenes-reso-0.1-10clusters.txt", quote = F, sep="\t")
> sum((ref.1.avg$RNA[,1]))
[1] 10000
> sum((ref.1.avg$RNA[,2]))
[1] 10000
> summary(ref.1.avg$RNA)
       0                  1                  2                  3                   4                  5                  6                  7                  8            
 Min.   :  0.0000   Min.   :  0.0000   Min.   :  0.0000   Min.   :  0.00000   Min.   :  0.0000   Min.   :  0.0000   Min.   :  0.0000   Min.   :  0.0000   Min.   :   0.0000  
 1st Qu.:  0.0093   1st Qu.:  0.0106   1st Qu.:  0.0100   1st Qu.:  0.00780   1st Qu.:  0.0137   1st Qu.:  0.0078   1st Qu.:  0.0086   1st Qu.:  0.0196   1st Qu.:   0.0000  
 Median :  0.0995   Median :  0.0880   Median :  0.1034   Median :  0.06687   Median :  0.0936   Median :  0.0678   Median :  0.0859   Median :  0.1214   Median :   0.0293  
 Mean   :  0.6841   Mean   :  0.6841   Mean   :  0.6841   Mean   :  0.68409   Mean   :  0.6841   Mean   :  0.6841   Mean   :  0.6841   Mean   :  0.6841   Mean   :   0.6841  
 3rd Qu.:  0.3751   3rd Qu.:  0.3284   3rd Qu.:  0.3895   3rd Qu.:  0.28298   3rd Qu.:  0.3332   3rd Qu.:  0.2903   3rd Qu.:  0.3149   3rd Qu.:  0.3938   3rd Qu.:   0.1900  
 Max.   :789.5800   Max.   :518.9368   Max.   :642.9373   Max.   :301.27950   Max.   :390.8133   Max.   :382.9453   Max.   :825.4658   Max.   :644.5161   Max.   :1423.5979  

> t1 <- ref.1.avg$RNA
g1 <- scan(what="", sep = "\n")
Tmem119
Cd14
P2ry12
Tgfbi
Ifitm2
Ifitm3
S100a6
Ly6c2
Ccr2
Mrc1
Cd163
Cd24a
Ncam1
Klrk1
Ncr1
Cd2
Cd3d
Cd4
Cd8b1
Ms4a1
Lgals3

#####P2ry12, Sparc, Tmem119, Gpr34, Selplg, and Cx3cr1 (refs. 19,42) in MG, Moâ€”Ly6i and Ly6c2, and MÎ¦ genesâ€”Ifitm3 (ref. 10) in Mo/MÎ¦, and BAM genesâ€”Apoe, Ms4a7, and Mrc1
P2ry12
Sparc
Tmem119
Gpr34
Selplg
Cx3cr1
Ly6i
Ly6c2
Ifitm3
Apoe
Ms4a7
Mrc1
Lgals3

t1.g <- t1[ rownames(t1) %in% g1, ]
dim(t1.g)
