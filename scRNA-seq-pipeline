vi refdata-cellranger-GRCh38-3.0.0/star/genomeParameters.txt
### STAR   --runMode genomeGenerate   --runThreadN 1   --genomeDir /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/star   --genomeFastaFiles /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/fasta/genome.fa      --genomeSAindexNbases 14   --genomeChrBinNbits 18   --genomeSAsparseD 3   --limitGenomeGenerateRAM 17179869184   --sjdbGTFfile /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/genes/genes.gtf
versionGenome   20201
genomeFastaFiles        /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/fasta/genome.fa
genomeSAindexNbases     14  
genomeChrBinNbits       18  
genomeSAsparseD 3
sjdbOverhang    100 
sjdbFileChrStartEnd     -   
sjdbGTFfile     /mnt/yard2/pat/cr/new-refs/reference_buildscripts2/GRCh38/genes/genes.gtf
sjdbGTFchrPrefix        -   
sjdbGTFfeatureExon      exon
sjdbGTFtagExonParentTranscript  transcript_id
sjdbGTFtagExonParentGene        gene_id
sjdbInsertSave  Basic

cellranger6 count --id=run_count_1kpbmcs --fastqs=/lab/solexa_page/linyong/run_cellranger_count/pbmc_1k_v3_fastqs --sample=pbmc_1k_v3 --transcriptome=/lab/solexa_page/linyong/run_cellranger_count/refdata-cellranger-GRCh38-3.0.0

### Step 1:
### You had fastq files for each scRNA library. To generate single cell feature (gene) counts for a single library, run cellranger count. You can set the parameter --expect-cells=10000 and the option â€“nosecondary when running the count command.
### 
### Run cellranger count for each library. If you have 10 libraries, you need to run 10 times with 10 outputs. Often, one sample (or one donor) is one library.
### 
### Please note that, by default, --include-introns option is turned off, meaning that intronic reads were excluded from the UMI counting.
### 
### Step 2:
### Step1 will generate filtered_feature_bc_matrix directory, among other outputs, for each library. Then use an R package Seurat. The following web site gives a nice documentation to merge multiple library outputs from cellranger into a single Seurat object. ### 
### https://satijalab.org/seurat/archive/v3.1/merge_vignette.html
### 
### 
### 
### With the single Seurat object generated, you can continue the downstream traditional analysis with scRNA-seq data.

ls run_count_1kpbmcs/outs/filter*matrix/ -lh
total 12M

-rw-r--r-- 1 linyong input 6.9K Jan 22 21:03 barcodes.tsv.gz
-rw-r--r-- 1 linyong input 298K Jan 22 21:03 features.tsv.gz
-rw-r--r-- 1 linyong input 9.0M Jan 22 21:03 matrix.mtx.gz

pbmc.data <- Read10X(data.dir = "filtered_feature_bc_matrix")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
dim(pbmc)
##[1] 15287  1183
###no filtering, [1] 33538  1225 
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 10)
#                    orig.ident nCount_RNA nFeature_RNA percent.mt
# AAACCCAAGGAGAGTA-1     pbmc3k       8509         2660  10.706311
# AAACGCTTCAGCCCAG-1     pbmc3k       5572         1826   7.914573
# AAAGAACAGACGACTG-1     pbmc3k       4318         1574   6.160259
# AAAGAACCAATGGCAG-1     pbmc3k       2788         1236   5.989957
# AAAGAACGTCTGCAAT-1     pbmc3k       6662         1854   6.604623
# AAAGGATAGTAGACAT-1     pbmc3k       8942         2062   7.906509

# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.

plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

###based on plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 20)
dim(pbmc)
# [1] 15287  1115 (94% of 1183 cells)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)

pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2

all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)

pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
DimPlot(pbmc, reduction = "pca")
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
#Number of communities: 8
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
DimPlot(pbmc, reduction = "umap", label=T)
saveRDS(pbmc, file = "../output/pbmc_tutorial.rds")

> install.packages("https://seurat.nygenome.org/src/contrib/ifnb.SeuratData_3.0.0.tar.gz", repos = NULL, type = "source")
> library(ifnb.SeuratData)
> LoadData("ifnb")

## Not run:
if (requireNamespace(Seurat, quietly = TRUE)) {
  url <- 'https://www.dropbox.com/s/79q6dttg8yl20zg/immune_alignment_expression_matrices.zip?dl=1'
  dl.name <- gsub(pattern = '\\?dl=1', replacement = '', x = basename(path = url))
  curl::curl_download(url = url, destfile = dl.name)
  unzip(zipfile = dl.name, exdir = tools::file_path_sans_ext(x = dl.name))
  ctrl.data <- read.table(file = file.path(tools::file_path_sans_ext(x = dl.name), 'immune_control_expression_matrix.txt.gz'), sep = '\t')
  stim.data <- read.table(file = file.path(tools::file_path_sans_ext(x = dl.name), 'immune_stimulated_expression_matrix.txt.gz'), sep = '\t')
  ctrl <- Seurat::CreateSeuratObject(counts = ctrl.data, project = 'IMMUNE_CTRL', min.cells = 5)
  ctrl$stim <- 'CTRL'
  ctrl <- subset(x = ctrl, subset = nFeature_RNA > 500)   
  stim <- Seurat::CreateSeuratObject(counts = stim.data, project = 'IMMUNE_STIM', min.cells = 5)
  stim$stim <- 'STIM'
  stim <- subset(x = stim, subset = nFeature_RNA > 500)
  ifnb <- merge(x = ctrl, y = stim) 
  Seurat::Project(object = ifnb) <- 'ifnb'
  # Annotations come from Seurat's stimulated/control guided clustering without the Mono/Mk doublets
  # https://satijalab.org/seurat/v3.0/immune_alignment.html
  annotations <- readRDS(file = system.file('extdata/annotations/annotations.Rds', package = 'ifnb.SeuratData'))
  ifnb <- Seurat::AddMetaData(object = ifnb, metadata = annotations)
  # Clean up downlaoded files
  file.remove(dl.name)
  unlink(x = tools::file_path_sans_ext(x = dl.name), recursive = TRUE)
}

## End(Not run)

library(SeuratData)
InstallData('pbmc3k')
  ..@ meta.data   :'data.frame':        2700 obs. of  4 variables:
  .. ..$ orig.ident        : Factor w/ 1 level "pbmc3k": 1 1 1 1 1 1 1 1 1 1 ...
  .. ..$ nCount_RNA        : num [1:2700] 2419 4903 3147 2639 980 ...
  .. ..$ nFeature_RNA      : int [1:2700] 779 1352 1129 960 521 781 782 790 532 550 ...
  .. ..$ seurat_annotations: Factor w/ 9 levels "Naive CD4 T",..: 2 4 2 3 7 2 5 5 1 6 ...
pbmc <- pbmc3k
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono",
    "NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()

> cluster5.markers <- FindMarkers(pbmc, ident.1 = 0, ident.2 = c(2), min.pct = 0.25)
  |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s
> head(cluster5.markers, n = 20)
                p_val avg_log2FC pct.1 pct.2    p_val_adj
S100A4   1.090806e-47 -1.0891751 0.700 0.929 1.495931e-43
MALAT1   2.781540e-37  0.5023381 1.000 1.000 3.814604e-33
B2M      9.190424e-32 -0.3039140 1.000 1.000 1.260375e-27
RPL32    1.601655e-29  0.3089689 0.999 1.000 2.196510e-25
VIM      4.413449e-28 -0.6620801 0.810 0.944 6.052605e-24
ACTB     3.144174e-27 -0.5397110 0.984 1.000 4.311920e-23
S100A11  2.612274e-25 -0.8518047 0.289 0.621 3.582473e-21

write.table( Idents(pbmc), "temp.txt", quote=F, sep="\t")
cp -i temp.txt   pbmc3k.clustering.annot.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine  temp.txt      pbmc3k.azimuth.anno.txt  out
paste  temp.txt    out | cut -f 3,12,13 > temp.2.txt

> azh <- read.delim("temp.2.txt")
> pbmc$cell.azh <- azh$cell
> pbmc$azh.annot <- azh$predicted.celltype.l2
> pbmc$azh.annot.score <- azh$predicted.celltype.l2.score
> t <- data.frame(pbmc$nCount_RNA, pbmc$cell.azh)
> i = 2700
> rownames(t)[i] == t$pbmc.cell.azh[i]
[1] TRUE
> DimPlot(pbmc, reduction = "umap", label = F, pt.size = 0.5, group.by="azh.annot", cols=c(rep("gray", 5), "red", "green", "orange", "blue",  rep("gray", 15)))
> cluster5.markers <- FindMarkers(pbmc, ident.1 = "CD4 Naive", ident.2 = "CD4 TCM", group.by="azh.annot", min.pct = 0.25)
> write.table(cluster5.markers, "temp.3.txt", quote=F, sep="\t")

#############################################################################
###SingleR
> library(celldex)
> ref.data <- MonacoImmuneData()
> unique(ref.data$label.main)
 [1] "CD8+ T cells"    "T cells"         "CD4+ T cells"    "Progenitors"     "B cells"         "Monocytes"
 [7] "NK cells"        "Dendritic cells" "Neutrophils"     "Basophils"
> unique(ref.data$label.fine)
 [1] "Naive CD8 T cells"             "Central memory CD8 T cells"    "Effector memory CD8 T cells"
 [4] "Terminal effector CD8 T cells" "MAIT cells"                    "Vd2 gd T cells"
 [7] "Non-Vd2 gd T cells"            "Follicular helper T cells"     "T regulatory cells"
[10] "Th1 cells"                     "Th1/Th17 cells"                "Th17 cells"
[13] "Th2 cells"                     "Naive CD4 T cells"             "Progenitor cells"
[16] "Naive B cells"                 "Non-switched memory B cells"   "Exhausted B cells"
[19] "Switched memory B cells"       "Plasmablasts"                  "Classical monocytes"
[22] "Intermediate monocytes"        "Non classical monocytes"       "Natural killer cells"
[25] "Plasmacytoid dendritic cells"  "Myeloid dendritic cells"       "Low-density neutrophils"
[28] "Low-density basophils"         "Terminal effector CD4 T cells"

library(SingleR)
library(SeuratData)
InstallData('pbmc3k')
pbmc <- pbmc3k
m <- as.matrix(pbmc@assays$RNA@counts)
summary(m[,1:12])
ref.data <- celldex::HumanPrimaryCellAtlasData()
ref.data
# class: SummarizedExperiment
# dim: 19363 713
pred <- SingleR(test = m , ref = ref.data,  labels =  ref.data$label.fine, assay.type.test=1)
write.table(data.frame(cell=colnames(m), label= pred$labels), "temp2", quote=F, sep = "\t")
vi temp2
cut -f 2,3 temp2 > temp2.2
mv -i temp2.2 pbmc3k.CellAtlas.singleR.annot.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine         pbmc3k.clustering.annot.txt pbmc3k.CellAtlas.singleR.annot.txt out

/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine   pbmc3k.clustering.annot.txt pbmc3k.Monaco.singleR.annot.txt  out
paste  pbmc3k.clustering.annot.txt out > temp.2
cat temp.2 | cut -f 2,4 | sort | uniq -c | sed 's/^ *//' | sed 's/  */\t/' | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 == "Naive CD4 T" ' | sort -nr | cut -f 1,3 | sed 's/^/ /'

pbmc.avg.exp <- AverageExpression(pbmc, group.by="ident", slot="data", verbose=T)
dim(pbmc.avg.exp$RNA)
###[1] 13714-RNA-features     9-clusters
summary(pbmc.avg.exp$RNA)
       0                  1                  2                   3                   4                  5
 Min.   :  0.0000   Min.   :  0.0000   Min.   :  0.00000   Min.   :  0.00000   Min.   :  0.0000   Min.   :  0.0000
 1st Qu.:  0.0179   1st Qu.:  0.0154   1st Qu.:  0.01832   1st Qu.:  0.01731   1st Qu.:  0.0165   1st Qu.:  0.0142
 Median :  0.0740   Median :  0.0686   Median :  0.07907   Median :  0.08325   Median :  0.0865   Median :  0.0678
 Mean   :  0.7292   Mean   :  0.7292   Mean   :  0.72918   Mean   :  0.72918   Mean   :  0.7292   Mean   :  0.7292
10000/13714
####[1] 0.7291819
ref.data <- MonacoImmuneData()
pred <- SingleR(test = pbmc.avg.exp$RNA , ref = ref.data,  labels =  ref.data$label.fine, assay.type.test=1)
> data.frame(pred$first.labels, pred$labels, pred$pruned.labels)
        pred.first.labels             pred.labels      pred.pruned.labels
1       Naive CD4 T cells               Th1 cells               Th1 cells
2     Classical monocytes     Classical monocytes     Classical monocytes
3               Th2 cells          Th1/Th17 cells          Th1/Th17 cells
4           Naive B cells           Naive B cells           Naive B cells
5          Vd2 gd T cells          Vd2 gd T cells          Vd2 gd T cells
6  Intermediate monocytes  Intermediate monocytes  Intermediate monocytes
7    Natural killer cells    Natural killer cells    Natural killer cells
8 Myeloid dendritic cells Myeloid dendritic cells Myeloid dendritic cells
9  Intermediate monocytes        Progenitor cells        Progenitor cells

###################################################################
###clustering on CD4/CD8 cells only
> pbmc.cd4.cd8 <- pbmc[,pbmc$RNA_snn_res.0.5 %in% c(0,2,4)]
> pbmc.cd4.cd8
An object of class Seurat
13714 features across 1502 samples within 1 assay
Active assay: RNA (13714 features, 2000 variable features)
 2 dimensional reductions calculated: pca, umap
> 696 + 467 + 339
[1] 1502

> pbmc.cd4.cd8 <- FindVariableFeatures(pbmc.cd4.cd8, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(pbmc.cd4.cd8)
pbmc.cd4.cd8 <- ScaleData(pbmc.cd4.cd8, features = all.genes)
pbmc.cd4.cd8 <- RunPCA(pbmc.cd4.cd8, features = VariableFeatures(object = pbmc.cd4.cd8))
ElbowPlot(pbmc.cd4.cd8)
pbmc.cd4.cd8 <- FindNeighbors(pbmc.cd4.cd8, dims = 1:10)
pbmc.cd4.cd8 <- FindClusters(pbmc.cd4.cd8, resolution = 0.5)
pbmc.cd4.cd8 <- RunUMAP(pbmc.cd4.cd8, dims = 1:10)
DimPlot(pbmc.cd4.cd8, reduction = "umap")
write.table( Idents(pbmc.cd4.cd8), "temp.txt", quote=F, sep="\t")
vi temp.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine   temp.txt  pbmc3k.azimuth.anno.txt   out

https://satijalab.org/seurat/articles/integration_introduction.html
###copied from above website
###14053 features across 13999 samples within 1 assay

library(Seurat)
library(SeuratData)
library(patchwork)
# install dataset
InstallData("ifnb")
# load dataset
LoadData("ifnb")

# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")

# normalize and identify variable features for each dataset independently
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
    x <- NormalizeData(x)
    x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})

# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = ifnb.list)
immune.anchors <- FindIntegrationAnchors(object.list = ifnb.list, anchor.features = features)
# this command creates an 'integrated' data assay
immune.combined <- IntegrateData(anchorset = immune.anchors)
# specify that we will perform downstream analysis on the corrected data note that the
# original unmodified data still resides in the 'RNA' assay
DefaultAssay(immune.combined) <- "integrated"

# Run the standard workflow for visualization and clustering
immune.combined <- ScaleData(immune.combined, verbose = FALSE)
immune.combined <- RunPCA(immune.combined, npcs = 30, verbose = FALSE)
immune.combined <- RunUMAP(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindNeighbors(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindClusters(immune.combined, resolution = 0.5) 
###15 clusters, 
#1799 CD4 Memory T
#2525 CD4 Naive T
# 779 CD8 T

DimPlot(immune.combined, reduction = "umap", label = TRUE, repel = TRUE)
FeaturePlot(immune.combined, features = c("CD3D", "SELL", "CREM", "CD8A", "GNLY", "CD79A", "FCGR3A",
    "CCL2", "PPBP"), min.cutoff = "q9")
    
####azimuth query data mapped to reference
library(Seurat)
library(SeuratDisk)
library(ggplot2)
library(patchwork)

setwd("/Users/linyongmao/Documents/scRNA-seq-1")
reference <- LoadH5Seurat("./pbmc_multimodal.h5seurat")
DimPlot(object = reference, reduction = "wnn.umap", group.by = "celltype.l2", label = TRUE, label.size = 3, repel = TRUE) + NoLegend()
library(SeuratData)
InstallData("ifnb")
LoadData("ifnb")
#########
ifnb1 <- subset( ifnb, subset= stim == "STIM" )

pbmc3k <- SCTransform(ifnb1, verbose = T)
###Set default assay to SCT
anchors <- FindTransferAnchors(
  reference = reference,
  query = pbmc3k,
  normalization.method = "SCT",
  reference.reduction = "spca",
  dims = 1:50
)
### Normalizing query using reference SCT model
### Projecting cell embeddings
### Finding neighborhoods
### Finding anchors
# [1] "CTRL" 6548 samples 
#     "STIM" 7451 samples
###ctrl         Found 3728 anchors
###STIM         Found 971 anchors
pbmc3k <- MapQuery(
  anchorset = anchors,
  query = pbmc3k,
  reference = reference,
  refdata = list(
    celltype.l1 = "celltype.l1",
    celltype.l2 = "celltype.l2",
    predicted_ADT = "ADT"
  ),
  reference.reduction = "spca",
  reduction.model = "wnn.umap"
)

DimPlot(pbmc3k, reduction = "ref.umap", group.by = "predicted.celltype.l2", label = TRUE, label.size = 3 ,repel = TRUE)
FeaturePlot(pbmc3k, features = c("CD4 Naive", "CD4 TCM"),  reduction = "ref.umap", cols = c("lightgrey", "darkred"), ncol = 2) & theme(plot.title = element_text(size = 10))
FeaturePlot(pbmc3k, features = c("CD8 Naive", "CD8 TCM", "CD8 TEM"),  reduction = "ref.umap", cols = c("lightgrey", "darkred"), ncol = 3) & theme(plot.title = element_text(size = 10))

###### gene expression per cell type per donor, azimuth ref data set
> ref.count <- CreateSeuratObject(counts = reference@assays$SCT@counts, meta.data = reference@meta.data)
> ref.1 <- subset(ref.count, subset = donor == "P1")
> ref.1 <- NormalizeData(ref.1, normalization.method = "LogNormalize", scale.factor = 10000)
> ref.1.avg <- AverageExpression(ref.1, group.by="celltype.l2", slot="data", verbose=T)
> dim(ref.1.avg$RNA)
###20729    31
> summary(ref.1.avg$RNA)
> write.table(ref.1.avg$RNA, "temp-P1.txt", quote = F, sep="\t")
> t1 = unique(ref.count$donor)
for(i in 1:length(t1)) {
 print(t1[i])
 ref.1 <- subset(ref.count, subset = donor == t1[i])
 ref.1 <- NormalizeData(ref.1, normalization.method = "LogNormalize", scale.factor = 10000)
 ref.1.avg <- AverageExpression(ref.1, group.by="celltype.l2", slot="data", verbose=T)
 dim(ref.1.avg$RNA)
 f <- paste("temp", t1[i], sep = "-")
 print(f)
 write.table(ref.1.avg$RNA, f, quote = F, sep="\t")
 }

#
ls temp-P[1-8] | while read ll
do
 cat "$ll" | awk 'NR == 1 ' | sed 's/^/gene     /' > "$ll".head
 cat "$ll" | awk 'NR > 1' >> "$ll".head
done

paste temp-P1.head temp-P2.head    temp-P3.head    temp-P4.head    temp-P5.head    temp-P6.head    temp-P7.head temp-P8.head > temp.1.txt
% cat temp-scr2
#
cat temp.1.txt | awk 'BEGIN {FS = "\t"; OFS = "\t"}
 {
  for(i = 33; i <= NF; i = i+32)
  {
   if($1 == $i)
     print "eq";
   else
     print "not";
  }
  print "line"
 }'

% bash temp-scr2 |  uniq -c | sort | uniq -c
#20730    1 line
#20730    7 eq
mv -i temp.1.txt azimuth.8donors.celltype.avg-expression.txt
> par(pin=c(12,3))
> boxplot(as.numeric( t3$V2) ~ t3$V1, las =2, xlab = "")

t1 <- read.delim("azimuth.8donors.celltype.avg-expression.txt", header = F)
par(pin=c(12,3))

gene = "CD8A"
t2 <- as.data.frame( t(rbind(t1[1,], t1[t1$V1 == gene,])))
t3 <- t2[ t2[,1] != "gene",]
boxplot( as.numeric(t3[,2]) ~ t3[,1], las=2, xlab = "")
abline(h = seq(0,200,1), lty = 5, lwd = 0.5, col = "gray")
tit <- paste(gene, "average expression per donor", sep = " ")
title(main = tit, cex = 0.5)

#############################################################################
### mouse scRNA-seq microglia
ls *mtx.gz | sed 's/-filtered-matrix.mtx.gz//' | while read dir
do
 mkdir dir-"$dir"
 ls "$dir"*
 mv "$dir"* dir-"$dir"
done

mv *-barcodes.tsv.gz barcodes.tsv.gz
mv *features.tsv.gz features.tsv.gz
mv *matrix.mtx.gz matrix.mtx.gz

ls  | grep dir- | grep -v dir-GSM4039241_f-ctrl-1 | while read dir
do
 cd "$dir"
 mv *-barcodes.tsv.gz barcodes.tsv.gz
 mv *features.tsv.gz features.tsv.gz
 mv *matrix.mtx.gz matrix.mtx.gz

 cd ..
done

ls | grep dir-GSM | while read dir
do
 echo -n "$dir\t"
 echo "$dir" | sed 's/dir-GSM[0-9]*_//'
done

cat nameDir-id 
dir-GSM4039241_f-ctrl-1	f-ctrl-1
dir-GSM4039242_f-ctrl-2	f-ctrl-2
dir-GSM4039243_f-tumor-1	f-tumor-1
dir-GSM4039244_f-tumor-2	f-tumor-2
dir-GSM4039245_m-ctrl-1	m-ctrl-1
dir-GSM4039246_m-ctrl-2	m-ctrl-2
dir-GSM4039247_m-tumor-1	m-tumor-1
dir-GSM4039248_m-tumor-2	m-tumor-2

setwd("/Users/linyongmao/Documents/microglia-mouse")

t1 <- read.delim("nameDir-id", header=F)
ss <- list()
for(i in 1:dim(t1)[1])
{
 mic.data <- Read10X(data.dir = t1[i, 1])
 ss[[i]] <- CreateSeuratObject(counts = mic.data, project = t1[i, 2], min.cells = 5)
}

t2 <- ss[[2]]
for(i in 3:8)
{
 t2 <- c(t2, ss[[i]])
}

mg <- merge(ss[[1]], y = t2, project = "microglia")
Warning message:
#In CheckDuplicateCellNames(object.list = objects) :
#  Some cell names are duplicated across objects provided. Renaming to enforce unique cell names.

mg
# An object of class Seurat 
# 14618 features across 41059 samples within 1 assay 
# Active assay: RNA (14618 features, 0 variable features)

for(i in 1:8)
{
 print(ss[[i]])
}
 
-rw-r--r--@ 1 linyongmao  staff   1.7M Jul  4 14:26 Mouse_ENSEMBL_Gene_ID_Human_Orthologs_MSigDB.v7.4.chip
2022 July downloaded

-rw-r--r--  1 linyongmao  staff   765M Jul  4 13:58 gencode.vM10.annotation.gtf
Release M10 (GRCm38.p4)
https://www.gencodegenes.org/mouse/release_M10.html
2022 July downloaded

#13 MT protein coding genes
mg[["percent.mt"]] <- PercentageFeatureSet(mg, pattern = "^mt-")
> # Visualize QC metrics as a violin plot
> VlnPlot(mg, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
> plot(mg$nCount_RNA, mg$percent.mt, ylim=c(0,25), cex=0.3 )
mg[ , mg$percent.mt < 10]
> plot(mg$nCount_RNA, mg$nFeature_RNA,  cex=0.3 )
> abline(h = seq(0,10000,500), lty = 5, lwd = 0.5, col = "gray")
> abline(v = seq(0,50000,5000), lty = 5, lwd = 0.5, col = "gray")
> mg[, mg$nFeature_RNA > 200 & mg$nFeature_RNA < 3000 & mg$percent.mt < 5 ]
> mg[, mg$nFeature_RNA > 500 & mg$nFeature_RNA < 3000 & mg$percent.mt < 5 ]

mg.1 <- mg[, mg$nFeature_RNA > 200 & mg$nFeature_RNA < 3000 & mg$percent.mt < 5 ]
## 14618 features across 40401 samples within 1 assay
ifnb.list <- SplitObject(mg.1, split.by = "orig.ident")
# normalize and identify variable features for each dataset independently
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
    x <- NormalizeData(x)
    x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = ifnb.list)
immune.anchors <- FindIntegrationAnchors(object.list = ifnb.list, anchor.features = features)
##Retained 5826 anchors
##  |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=59m 29s
# this command creates an 'integrated' data assay
immune.combined <- IntegrateData(anchorset = immune.anchors)
# specify that we will perform downstream analysis on the corrected data note that the
# original unmodified data still resides in the 'RNA' assay
DefaultAssay(immune.combined) <- "integrated"

# Run the standard workflow for visualization and clustering
immune.combined <- ScaleData(immune.combined, verbose = FALSE)
immune.combined <- RunPCA(immune.combined, npcs = 30, verbose = TRUE)
immune.combined <- RunUMAP(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindNeighbors(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindClusters(immune.combined, resolution=0.3)
# Number of nodes: 40401
# Number of edges: 1652874
# Number of communities: 19

DimPlot(immune.combined, reduction = "umap", label = TRUE, repel = TRUE)

> saveRDS(immune.anchors, file="anchors.rds")
> DefaultAssay(immune.combined) <- "RNA"
>  ref.1.avg <- AverageExpression(immune.combined, group.by="integrated_snn_res.0.1", slot="data", verbose=T)
>  write.table(ref.1.avg$RNA, "avg-exp-allgenes-reso-0.1-10clusters.txt", quote = F, sep="\t")
> sum((ref.1.avg$RNA[,1]))
[1] 10000
> sum((ref.1.avg$RNA[,2]))
[1] 10000
> summary(ref.1.avg$RNA)
       0                  1                  2                  3                   4                  5                  6                  7                  8            
 Min.   :  0.0000   Min.   :  0.0000   Min.   :  0.0000   Min.   :  0.00000   Min.   :  0.0000   Min.   :  0.0000   Min.   :  0.0000   Min.   :  0.0000   Min.   :   0.0000  
 1st Qu.:  0.0093   1st Qu.:  0.0106   1st Qu.:  0.0100   1st Qu.:  0.00780   1st Qu.:  0.0137   1st Qu.:  0.0078   1st Qu.:  0.0086   1st Qu.:  0.0196   1st Qu.:   0.0000  
 Median :  0.0995   Median :  0.0880   Median :  0.1034   Median :  0.06687   Median :  0.0936   Median :  0.0678   Median :  0.0859   Median :  0.1214   Median :   0.0293  
 Mean   :  0.6841   Mean   :  0.6841   Mean   :  0.6841   Mean   :  0.68409   Mean   :  0.6841   Mean   :  0.6841   Mean   :  0.6841   Mean   :  0.6841   Mean   :   0.6841  
 3rd Qu.:  0.3751   3rd Qu.:  0.3284   3rd Qu.:  0.3895   3rd Qu.:  0.28298   3rd Qu.:  0.3332   3rd Qu.:  0.2903   3rd Qu.:  0.3149   3rd Qu.:  0.3938   3rd Qu.:   0.1900  
 Max.   :789.5800   Max.   :518.9368   Max.   :642.9373   Max.   :301.27950   Max.   :390.8133   Max.   :382.9453   Max.   :825.4658   Max.   :644.5161   Max.   :1423.5979  

> t1 <- ref.1.avg$RNA
g1 <- scan(what="", sep = "\n")
Tmem119
Cd14
P2ry12
Tgfbi
Ifitm2
Ifitm3
S100a6
Ly6c2
Ccr2
Mrc1
Cd163
Cd24a
Ncam1
Klrk1
Ncr1
Cd2
Cd3d
Cd4
Cd8b1
Ms4a1
Lgals3

#####P2ry12, Sparc, Tmem119, Gpr34, Selplg, and Cx3cr1 (refs. 19,42) in MG, Moâ€”Ly6i and Ly6c2, and MÎ¦ genesâ€”Ifitm3 (ref. 10) in Mo/MÎ¦, and BAM genesâ€”Apoe, Ms4a7, and Mrc1
P2ry12
Sparc
Tmem119
Gpr34
Selplg
Cx3cr1
Ly6i
Ly6c2
Ifitm3
Apoe
Ms4a7
Mrc1
Lgals3

t1.g <- t1[ rownames(t1) %in% g1, ]
dim(t1.g)

mat <- as.matrix(t1.g)
write.table(immune.combined@meta.data, "temp-meta-data.txt", quote=F, sep="\t" )
DefaultAssay(immune.combined) <- "RNA"
ref.1.avg <- AverageExpression(immune.combined, group.by="integrated_snn_res.0.6", slot="data", verbose=T)
sum(ref.1.avg$RNA[,1])
[1] 10000
ref.data <- MouseRNAseqData()
pred <- SingleR(test = ref.1.avg$RNA , ref = ref.data,  labels =  ref.data$label.fine, assay.type.test=1)
data.frame(pred$first.labels, pred$labels, pred$pruned.labels)
### install.packages("pheatmap")
library(pheatmap)
### install.packages("viridis")
library(viridis)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred, ncol = 3)
####column #15 for cluster 14
pred <- SingleR(test = ref.1.avg$RNA[,c(15, 9, 8,18)] , ref = ref.data,  labels =  ref.data$label.fine, assay.type.test=1)
plotScoreHeatmap(pred)
> ref.data <- celldex::ImmGenData()

> ref.tam.avg <- AverageExpression(immune.combined, group.by="orig.ident", slot="data", verbose=T)
sum(ref.tam.avg$RNA[,1:8])
###[1] 80000

for g in `echo REL  RELB    NFKB2   NFKBIE  NFKBIA  NFKB1`
do
awk '$2 == "'$g'"' Mouse_ENSEMBL_Gene_ID_Human_Orthologs_MSigDB.v7.4.chip
done > temp.1

cat temp.1 | cut -f 1 | while read g
do
###grep 1 gene 1 minute
grep -w $g gencode.vM10.annotation.gtf  | awk '$3 == "gene"'
done > temp.2

cat temp.2 | cut -f 9 | awk 'BEGIN {FS = ";"} {print $4}' | sed 's/ gene_name //' | sed 's/"//g' | sed 's/ *//'

g1 <- scan(what="", sep = "\n")
ref.tam.avg$RNA[ rownames(ref.tam.avg$RNA) %in% g1, ]
t1 <- ref.tam.avg$RNA[ rownames(ref.tam.avg$RNA) %in% g1, ]
for(i in 1:dim(t1)[1])
{
 t2 <- t.test(t1[i, 1:2], t1[i, 3:4])
 t3 <- t.test(t1[i, 5:6], t1[i, 7:8])
 str <- paste(rownames(t1)[i], t2$p.value, log2(t2$estimate[2] / t2$estimate[1]), 
 t3$p.value, log2(t3$estimate[2] / t3$estimate[1]), sep = "\t" )
 cat(str)
 cat("\n")
}

### t.test
sink("mouse.clusts.micro.female.tum.t.test.txt")
for(i in 1:dim(t1)[1])
{
 t2 <- t.test(t1[i, 1:2], t1[i, 3:4])
 str <- paste(rownames(t1)[i], t2$p.value, log2(t2$estimate[2] / t2$estimate[1]),
  sep = "\t" )
 cat(str)
 cat("\n")
}
sink()

######t.test result to .rnk file. ###cat te-script-ttest-op2rnk 
# 
 echo "geneID	p-value	logFC" > temp
 cat mouse.clusts.micro.female.tum.t.test.txt | sed 's/	Inf/123456789/' | sed 's/	-Inf/-123456789/' >> temp
 mv temp mouse.clusts.micro.female.tum.t.test.txt
 /Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine mouse.clusts.micro.female.tum.t.test.txt  M10.geneID-name-chr-type.2.name-first.txt out
paste mouse.clusts.micro.female.tum.t.test.txt   out | grep -vw notApplicable |
awk 'BEGIN {FS = "\t"; OFS = "\t"; ORS = ""}
{
print $6;
for(i = 1; i <= NF; i++)
{
 if(i != 6)
 {
  print "\t" $i;
 }
}
print "\n"
}' > mouse.clusts.micro.female.tum.t.test.geneID.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine  mouse.clusts.micro.female.tum.t.test.geneID.txt Mouse_ENSEMBL_Gene_ID_Human_Orthologs_MSigDB.v7.4.chip out
paste mouse.clusts.micro.female.tum.t.test.geneID.txt out | grep -vw notApplicable > mouse.clusts.micro.female.tum.t.test.human.gene.name.txt 
cat mouse.clusts.micro.female.tum.t.test.human.gene.name.txt  | awk 'BEGIN {FS = "\t"; OFS = "\t"; ORS = ""}
{
print $2, $4,$5,$6, $3, $7, $8, $10, $11 "\n"}' > temp
/Users/linyongmao/Documents/microglia/make-rnk-genesymble temp mouse.clusts.micro.female.tum.t.test.human.gene.name.rnk

> Heatmap(matrix =log2(mat+1), name = "log2(expr)", clustering_distance_columns="spearman", clustering_method_columns="complete", column_names_side = "top")
######################################################################################
### voom DEG testing, scRNA-seq psuedo-bulk, cluster #0, male mouse, tumor vs control
immune.0 <- immune.combined[, immune.combined$integrated_snn_res.0.6 == 0] ###5748 cells in cluster 0
DefaultAssay(immune.0) <- "RNA"
ref.0.avg <- AverageExpression(immune.0, group.by="orig.ident", slot="data", verbose=T)
sum(ref.0.avg$RNA[,1])
###[1] 10000
t1 <-  ref.0.avg$RNA[,5:8] * 100 ### * 100, turn to tpm
keep <-rowSums(t1 >= 1) >= 2
t1 <- t1[keep,]
dim(t1)
g <- c("m-c","m-c","m-t", "m-t")
mm <- model.matrix(~g)
y <- voom(counts = as.matrix(t1), design=mm, plot=T)
fit <- lmFit(y, mm)
tmp <- contrasts.fit(fit, coef = 2) # test "gm-t" coefficient
tmp <- eBayes(tmp)
top.table <- topTable(tmp, sort.by = "P", n = Inf)
head(top.table, 20)
write.table(top.table, "temp.clust.0.m.tum.txt", quote=F, sep="\t")

sed '1 s/^/geneID   /' temp.clust.0.m.tum.txt > temp
mv temp temp.clust.0.m.tum.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine  temp.clust.0.m.tum.txt  M10.geneID-name-chr-type.2.name-first.txt out
paste temp.clust.0.m.tum.txt   out | grep -vw notApplicable |
awk 'BEGIN {FS = "\t"; OFS = "\t"; ORS = ""}
{
print $10;
for(i = 1; i <= NF; i++)
{
 if(i != 10)
 {
  print "\t" $i;
 }
}
print "\n"
}' > temp.clust.0.m.tum.geneID.txt

/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine    temp.clust.0.m.tum.geneID.txt  Mouse_ENSEMBL_Gene_ID_Human_Orthologs_MSigDB.v7.4.chip out
paste  temp.clust.0.m.tum.geneID.txt  out | grep -vw notApplicable > temp.clust.0.m.tum.human.gene.name.txt
cat temp.clust.0.m.tum.human.gene.name.txt | cut -f 2-6,7,10,14 > temp
/Users/linyongmao/Documents/microglia/make-rnk-genesymble temp temp.clust.0.m.tum.human.gene.rnk


####################################### cluster #0, female mouse, tumor vs control
DefaultAssay(immune.0) <- "RNA"
ref.0.avg <- AverageExpression(immune.0, group.by="orig.ident", slot="data", verbose=T)
sum(ref.0.avg$RNA[,1])
###[1] 10000
t1 <-  ref.0.avg$RNA[,1:4] * 100 ### * 100, turn to tpm 
keep <-rowSums(t1 >= 1) >= 2
t1 <- t1[keep,]
dim(t1)
# 10989     4 
g <- c("f-c","f-c","f-t", "f-t")
mm <- model.matrix(~g)
y <- voom(counts = as.matrix(t1), design=mm, plot=T)
fit <- lmFit(y, mm)
tmp <- contrasts.fit(fit, coef = 2) # test "gf-t" coefficient
tmp <- eBayes(tmp)
top.table <- topTable(tmp, sort.by = "P", n = Inf)
head(top.table, 20)
#               logFC   AveExpr         t      P.Value    adj.P.Val         B
# Ifitm3    3.8488483  5.321071 15.543203 5.729872e-08 0.0006296556 6.7523914
# Rtp4      2.8398411  5.457652 13.469757 2.060527e-07 0.0011321568 6.7137824
# Ifi27l2a  3.7520950  5.648972 12.471517 4.074820e-07 0.0014926065 6.0981774
# H2-D1     1.0923742  9.961997  9.635695 3.830362e-06 0.0085751606 4.5733087


write.table(top.table, "temp.clust.0.f.tum.txt", quote=F, sep="\t")
###add geneID as header in 1st line 1st column
vi temp.clust.0.f.tum.txt
cat gencode.vM10.annotation.gtf | awk 'BEGIN{FS = "\t"} $3 == "gene"' | cut -f 1,9 | sed 's/;/       /g' | cut -f 1,2,3,4,5 > temp-1

awk 'BEGIN {FS = "\t"; OFS = "\t"; ORS = ""} 
{
 print $5, $1, $2, $3, $4 "\n";
}' M10.geneID-name-chr-type.2.txt > M10.geneID-name-chr-type.2.name-first.txt

/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine  temp.clust.0.f.tum.txt  M10.geneID-name-chr-type.2.name-first.txt out
paste temp.clust.0.f.tum.txt   out | grep -vw notApplicable | 
awk 'BEGIN {FS = "\t"; OFS = "\t"; ORS = ""}
{
print $10;
for(i = 1; i <= NF; i++)
{
 if(i != 10)
 {
  print "\t" $i;
 }
}
print "\n"
}' > temp.clust.0.f.tum.geneID.txt  

/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine    temp.clust.0.f.tum.geneID.txt  Mouse_ENSEMBL_Gene_ID_Human_Orthologs_MSigDB.v7.4.chip out
paste  temp.clust.0.f.tum.geneID.txt  out | grep -vw notApplicable > temp.clust.0.f.tum.human.gene.name.txt
cat temp.clust.0.f.tum.human.gene.name.txt | cut -f 2-6,7,10,14 > temp
/Users/linyongmao/Documents/microglia/make-rnk-genesymble temp temp.clust.0.f.tum.human.gene.rnk

bash /Users/linyongmao/Documents/GSEA_4.1.0/gsea-cli.sh  GSEAPreranked -gmx   /Users/linyongmao/Documents/h.all.v7.4.symbols.gmt    -collapse No_Collapse -mode Max_probe -norm meandiv  -nperm 1000 -rnk  temp.clust.0.m.tum.human.gene.rnk  -rpt_label   "temp.mice.clust.0.m_TAM.prerank_p.v7.4"  -create_svgs false -include_only_symbols true   -make_sets true -plot_top_x 1234567 -rnd_seed 1234 -set_max 500  -zip_report false -out  "/Users/linyongmao/gsea_home/output/microgliaSex"
### -set_min 15

#############################################################################
### scRNA-seq whole pathway level z-score
mic <- c(0:5,7,9,14)
immune.mic <- immune.combined[, immune.combined$integrated_snn_res.0.6 %in% mic] ###5748 cells in cluster 0
immune.mic
# 16618 features across 31165 (out of 40401) samples within 2 assays
DefaultAssay(immune.mic) <- "RNA"
ref.0.avg <- AverageExpression(immune.mic, group.by="orig.ident", slot="data", verbose=T)
sum(ref.0.avg$RNA[,1])
t1 <-  ref.0.avg$RNA * 100 ### * 100, turn to tpm
summary(t1)
t2 <- as.matrix(t1)
summary(t2)
med <- data.frame( t2[,1])
med$logic <- TRUE
for(i in 1:dim(t2)[1]) {
 med$logic[i] <- median(t2[i,]) >= 1
}
t2<-t2[med$logic,]
dim(t2)
# [1] 10941     8
a <- t2
b = log10(a+1)
for(i in 1:dim(b)[1])
{
 a[i, ] <- (b[i, ] - mean(as.numeric(b[i,]))) / var(as.numeric(b[i,]))^(1/2)
}
###a is z-score of log10(cpm+1)
x1 <- read.delim("Mouse_ENSEMBL_Gene_ID_Human_Orthologs_MSigDB.v7.4.chip")
head(x1)
#                   ID Gene.Symbol                                                                Gene.Title
# 1 ENSMUSG00000000001       GNAI3             G protein subunit alpha i3 [Source:HGNC Symbol;Acc:HGNC:4387]
x2 <- read.delim("M10.geneID-name-chr-type.2.txt")
a2 <- as.data.frame(a)
a2$name <- rownames(a2)
###################################################
#############x2, geneID is not unique, duplicated gene names
a2.x <- merge(a2, x2, by.x="name", by.y = "geneID")
a3.x <- merge(a2.x, x1, by.x="ID", by.y="ID")
f <- read.delim("/Users/linyongmao/Documents/microglia/temp-files-2", header=F)
dim(f)
# [1] 50 pathways,  1
i = 25
f[i,1]
p <- read.delim(paste("/Users/linyongmao/Documents/microglia/", f[i,1], sep=""), header=F)
p.exp <- a3.x[ a3.x$Gene.Symbol %in% p$V1, ]
length(p.exp$Gene.Symbol)
# [1] 120 genes in the inflamm pathway through mouse-human gene  mapping
mat <- as.matrix(p.exp[, c(3:10)])
res <- data.frame(id = colnames(mat), mean = colMeans(mat))
info <- c("f-ctrl", "f-ctrl", "f-tumor", "f-tumor", "m-ctrl", "m-ctrl", "m-tumor", "m-tumor")
res$group <- info
boxplot(res$mean ~ res$group, xlab = "", ylab = "z-score avg of all genes")
title(main=paste(length(mic), "microglia", "clusters\n", f[i,1]))
beeswarm(res$mean ~ res$group, pch = c(16,16,17,17), col = c("green", "red", "green", "red" ), cex = 2, add = T)
abline(h = seq(-10,10,0.05), lty = 5, lwd = 0.5, col = "gray")

################################################################################
### aggregate counts per sample, edgeR
> BiocManager::install("SingleCellExperiment")
Warning message:
package(s) not installed when version(s) same as current; use `force = TRUE` to re-install: 'SingleCellExperiment'
> library(SingleCellExperiment)
#Attaching package: â€˜SingleCellExperimentâ€™
#The following object is masked from â€˜package:edgeRâ€™:
#    cpm

counts <- immune.mic@assays$RNA@counts
metadata <- immune.mic@meta.data
metadata$cluster_id <- metadata$integrated_snn_res.0.6
# Create single cell experiment object
sce <- SingleCellExperiment(assays = list(counts = counts),
                           colData = metadata)
# Identify groups for aggregation of counts
# groups: character class
groups <- colData(sce)[, c("orig.ident")]
# Aggregate across cluster-sample groups
pb <- aggregate.Matrix(t(counts(sce)),
                       groupings = groups, fun = "sum")

class(pb)

dim(pb)
# [1]     8 14618
pb[1:8, 1:6] # 8 samples
t1 <- as.data.frame(t(pb))
head(t1)
dim(t1)
group <- factor(rep(1, 8))
y <- DGEList(counts=t1,group=group)
y <- calcNormFactors(y)
# $samples
#           group lib.size norm.factors
# f-ctrl-1      1 10341169    1.0646442
# f-ctrl-2      1 10532754    1.0679185
# f-tumor-1     1  8254301    0.9430448
# f-tumor-2     1 10370699    0.9643678
# m-ctrl-1      1  8868850    1.0664425
# m-ctrl-2      1  9519282    1.0567604
# m-tumor-1     1  7168687    0.9162843
# m-tumor-2     1  8580658    0.9365655

mds <- plotMDS(y, top=98765)

#############################################################################
###aggregate counts of scRNA-seq per sample, then using edgeR ,female DEG
t2 <- t1[, 1:4]
head(t2)
#         f-ctrl-1 f-ctrl-2 f-tumor-1 f-tumor-2
# Sox17          0        0         0         0
# Mrpl15       652      618       475       626
group <- factor(rep(1, 4))
y <- DGEList(counts=t2,group=group)
y <- calcNormFactors(y)
keep <-rowSums(edgeR::cpm(y)>=1) >= 2
y<-y[keep,]
dim(y)
# 11195  genes in female after filtering;
g <- c("f-c","f-c","f-t", "f-t")
design <- model.matrix(~g)
y <- estimateDisp(y,design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef=2)
top2v1 <- topTags(qlf, n = 91234)
write.table(top2v1, "diff2-1.txt", sep="\t", quote = F)

sed '1 s/^/geneID   /' mouse.clusts.micro.female.diff2-1.edgeR.txt > temp 
mv temp mouse.clusts.micro.female.diff2-1.edgeR.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine  mouse.clusts.micro.female.diff2-1.edgeR.txt  M10.geneID-name-chr-type.2.name-first.txt out
paste mouse.clusts.micro.female.diff2-1.edgeR.txt   out | grep -vw notApplicable |
awk 'BEGIN {FS = "\t"; OFS = "\t"; ORS = ""}
{
print $9;
for(i = 1; i <= NF; i++)
{
 if(i != 9)
 {
  print "\t" $i;
 }
}
print "\n"
}' > mouse.clusts.micro.female.diff2-1.edgeR.geneID.txt

/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine    mouse.clusts.micro.female.diff2-1.edgeR.geneID.txt  Mouse_ENSEMBL_Gene_ID_Human_Orthologs_MSigDB.v7.4.chip out
paste  mouse.clusts.micro.female.diff2-1.edgeR.geneID.txt  out | grep -vw notApplicable > mouse.clusts.micro.female.diff2-1.edgeR.human.gene.name.txt
cat mouse.clusts.micro.female.diff2-1.edgeR.human.gene.name.txt | cut -f 2-8,13 > temp
head -3 temp       
/Users/linyongmao/Documents/microglia/make-rnk-genesymble temp mouse.clusts.micro.female.diff2-1.edgeR.human.gene.rnk

bash /Users/linyongmao/Documents/GSEA_4.1.0/gsea-cli.sh  GSEAPreranked -gmx   /Users/linyongmao/Documents/h.all.v7.4.symbols.gmt    -collapse No_Collapse -mode Max_probe -norm meandiv  -nperm 1000 -rnk  mouse.clusts.micro.female.diff2-1.edgeR.human.gene.rnk  -rpt_label   "mouse.clusts.micro.female.edgeR_TAM.prerank_p.v7.4"  -create_svgs false -include_only_symbols true   -make_sets true -plot_top_x 1234567 -rnd_seed 1234 -set_max 500  -zip_report false -out  "/Users/linyongmao/gsea_home/output/microgliaSex"

###male DEG
t2 <- t1[, 5:8]
head(t2)
group <- factor(rep(1, 4))
y <- DGEList(counts=t2,group=group)
y <- calcNormFactors(y)
y
keep <-rowSums(edgeR::cpm(y)>=1) >= 2
y<-y[keep,]
dim(y)
# 11150 genes in male after filtering;
g <- c("m-c","m-c","m-t", "m-t")
design <- model.matrix(~g)
y <- estimateDisp(y,design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef=2)
top2v1 <- topTags(qlf, n = 91234)
write.table(top2v1, "diff2-1.txt", sep="\t", quote = F)

sed '1 s/^/geneID   /' mouse.clusts.micro.male.diff2-1.edgeR.txt > temp
mv temp mouse.clusts.micro.male.diff2-1.edgeR.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine  mouse.clusts.micro.male.diff2-1.edgeR.txt  M10.geneID-name-chr-type.2.name-first.txt out
paste mouse.clusts.micro.male.diff2-1.edgeR.txt   out | grep -vw notApplicable |
awk 'BEGIN {FS = "\t"; OFS = "\t"; ORS = ""}
{
print $9;
for(i = 1; i <= NF; i++)
{
 if(i != 9)
 {
  print "\t" $i;
 }
}
print "\n"
}' > mouse.clusts.micro.male.diff2-1.edgeR.geneID.txt

/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine    mouse.clusts.micro.male.diff2-1.edgeR.geneID.txt  Mouse_ENSEMBL_Gene_ID_Human_Orthologs_MSigDB.v7.4.chip out
paste  mouse.clusts.micro.male.diff2-1.edgeR.geneID.txt  out | grep -vw notApplicable > mouse.clusts.micro.male.diff2-1.edgeR.human.gene.name.txt
cat mouse.clusts.micro.male.diff2-1.edgeR.human.gene.name.txt | cut -f 2-8,13 > temp
head -3 temp
/Users/linyongmao/Documents/microglia/make-rnk-genesymble temp mouse.clusts.micro.male.diff2-1.edgeR.human.gene.rnk

bash /Users/linyongmao/Documents/GSEA_4.1.0/gsea-cli.sh  GSEAPreranked -gmx   /Users/linyongmao/Documents/h.all.v7.4.symbols.gmt    -collapse No_Collapse -mode Max_probe -norm meandiv  -nperm 1000 -rnk  mouse.clusts.micro.male.diff2-1.edgeR.human.gene.rnk  -rpt_label   "mouse.clusts.micro.male.edgeR_TAM.prerank_p.v7.4"  -create_svgs false -include_only_symbols true   -make_sets true -plot_top_x 1234567 -rnd_seed 1234 -set_max 500  -zip_report false -out  "/Users/linyongmao/gsea_home/output/microgliaSex"

#############################################################################
###make .gmt file 
echo -n "female-noCereb.noOcci-upreg-pe2\tmicroglia-p-value-0.01" > temp-1
cat ../microglia/female-noCereb.noOcci-diff2-1.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 >= -log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

echo -n "female-tumResecOnly-upreg-pe2\tmicroglia-p-value-0.01" >> temp-1
cat ../microglia/female-14samps.tumResecOnly.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 >= -log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

echo -n "female-all39samples-upreg-pe2\tmicroglia-p-value-0.01" >> temp-1
cat ../microglia/female-diff2-1-filtgenesFirst.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 >= -log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

echo -n "male-noCereb.noOcci-upreg-pe2\tmicroglia-p-value-0.01" >> temp-1
cat ../microglia/male-noCereb.noOcci-diff2-1.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 >= -log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

echo -n "male-tumResecOnly-upreg-pe2\tmicroglia-p-value-0.01" >> temp-1
cat ../microglia/M-17samps.tumResecOnly.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 >= -log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

echo -n "male-all39samples-upreg-pe2\tmicroglia-p-value-0.01" >> temp-1
cat ../microglia/male-diff2-1-filtgenesFirst.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 >= -log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

cat ../microglia/onco-supp-genes-glio.gmt >> temp-1
cat ../DDX3X_targets.gmt >> temp-1

mv -i  temp-1 microglia-TAM.gmt

bash /Users/linyongmao/Documents/GSEA_4.1.0/gsea-cli.sh  GSEAPreranked -gmx    microglia-TAM.gmt   -collapse No_Collapse -mode Max_probe -norm meandiv  -nperm 1000 -rnk  mouse.clusts.micro.female.diff2-1.edgeR.human.gene.rnk  -rpt_label   "mouse.clusts.micro.female.edgeR_TAM.prerank.human.geneSet.v7.4"  -create_svgs false -include_only_symbols true   -make_sets true -plot_top_x 1234567 -rnd_seed 1234 -set_max 500  -zip_report false -out  "/Users/linyongmao/gsea_home/output/microgliaSex"

########### .gmt file - down-reg-genes
echo -n "female-noCereb.noOcci-downreg-pe2\tmicroglia-p-value-0.01" > temp-1
cat ../microglia/female-noCereb.noOcci-diff2-1.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 <= log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

echo -n "female-tumResecOnly-downreg-pe2\tmicroglia-p-value-0.01" >> temp-1
cat ../microglia/female-14samps.tumResecOnly.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 <= log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

echo -n "female-all39samples-downreg-pe2\tmicroglia-p-value-0.01" >> temp-1
cat ../microglia/female-diff2-1-filtgenesFirst.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 <= log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

echo -n "male-noCereb.noOcci-downreg-pe2\tmicroglia-p-value-0.01" >> temp-1
cat ../microglia/male-noCereb.noOcci-diff2-1.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 <= log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

echo -n "male-tumResecOnly-downreg-pe2\tmicroglia-p-value-0.01" >> temp-1
cat ../microglia/M-17samps.tumResecOnly.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 <= log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

echo -n "male-all39samples-downreg-pe2\tmicroglia-p-value-0.01" >> temp-1
cat ../microglia/male-diff2-1-filtgenesFirst.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 <= log(0.01)/log(10)' |  awk 'BEGIN {FS = "\t"; OFS = ""; ORS = ""} {print "\t" $1}' >> temp-1
echo >> temp-1

cat  temp-1 >> microglia-TAM.gmt

bash /Users/linyongmao/Documents/GSEA_4.1.0/gsea-cli.sh  GSEAPreranked -gmx    microglia-TAM.gmt   -collapse No_Collapse -mode Max_probe -norm meandiv  -nperm 1000 -rnk  mouse.clusts.micro.male.diff2-1.edgeR.human.gene.rnk  -rpt_label   "mouse.clusts.micro.male.edgeR_TAM.prerank.human.geneSet"  -create_svgs false -include_only_symbols true   -make_sets true -plot_top_x 1234567 -rnd_seed 1234 -set_max 500  -zip_report false -out  "/Users/linyongmao/gsea_home/output/microgliaSex"

cat mouse.clusts.micro.female.diff2-1.edgeR.human.gene.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 >= -log(0.01)/log(10)'  | wc -l
cat mouse.clusts.micro.female.diff2-1.edgeR.human.gene.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 <= log(0.01)/log(10)'  | wc -l
cat mouse.clusts.micro.male.diff2-1.edgeR.human.gene.rnk   | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 >= -log(0.01)/log(10)'  | wc -l
cat mouse.clusts.micro.male.diff2-1.edgeR.human.gene.rnk   | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 <= log(0.01)/log(10)'  | wc -l

#############################################################################
###hypergeometric testing; human_DEG\tmouse_DEG\t#ofbg_genes\toverlap_genes\
echo "human_DEG\tmouse_DEG\t#ofbg_genes\toverlap_genes\texpected_overlap\tenrichment\tenrich_p-value" > temp-res
cat ../microglia/female-diff2-1-filtgenesFirst.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 >= - log(0.01)/log(10)' | cut -f 1 | sort | uniq > temp-human
cat mouse.clusts.micro.female.diff2-1.edgeR.human.gene.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} $2 >= - log(0.01)/log(10)' | cut -f 1 | sort | uniq > temp-mouse
cat ../microglia/female-diff2-1-filtgenesFirst.rnk | cut -f 1 | sort | uniq > temp-1
cat mouse.clusts.micro.female.diff2-1.edgeR.human.gene.rnk | cut -f 1 | sort | uniq > temp-2
cat temp-1 temp-2| sort | uniq -d > temp-bg

cat temp-human temp-bg | sort | uniq -d > temp-3
mv temp-3 temp-human
cat temp-mouse temp-bg | sort | uniq -d > temp-4
mv temp-4 temp-mouse

h=`wc -l temp-human | awk '{print $1}' `
m=`wc -l temp-mouse | awk '{print $1}' `
ov=`cat temp-human temp-mouse | sort | uniq -d | wc -l | awk '{print $1}' `
bg=`wc -l temp-bg | awk '{print $1}' `
ep=` echo "$h\t$m\t$bg" | awk '{print $1 * $2 / $3}'  `
rich=` echo "$ep\t$ov" | awk '{print  $2 / $1}' `
echo "$h\t$m\t$bg\t$ov\t$ep\t$rich" > temp-res-r-ip
###must after temp-res-r-ip file generated
p_val=`Rscript R-script-hypergeo-1 | awk '{print $2}' `
echo "$h\t$m\t$bg\t$ov\t$ep\t$rich\t$p_val" >> temp-res

cat temp-res

####
cat ../microglia/female-diff2-1-filtgenesFirst.rnk | cut -f 1 | sort | uniq > temp-1
cat mouse.clusts.micro.female.diff2-1.edgeR.human.gene.rnk | cut -f 1 | sort | uniq > temp-2
wc -l temp-1 temp-2
cat temp-1 temp-2| sort | uniq -d | wc -l
#   16835 temp-1
#   10037 temp-2
#   26872 total
#    9418

#############################################################################
### make female logFC (tumor vs control, only two samples per group, median) based gene rank file
immune.anchors <- readRDS("anchors.rds")
......
> immune.combined <- FindClusters(immune.combined, resolution=0.6)
Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck

Number of nodes: 40401
Number of edges: 1650579

Maximum modularity in 10 random starts: 0.8882
Number of communities: 22

####temp-1, female 4 samples, cpm, filtered out low expr genes
write.table(edgeR::cpm(y), "temp-1", quote=F, sep="\t")
vi temp-1
cat temp-1 | awk '
BEGIN {FS = "\t"; OFS = "\t"} 
{
 if(NR == 1)
 {
  print $0, "log2FC";
 }
 else
 {
  c=($2 + $3 + 0.5*2) /2;
  t=($4 + $5 + 0.5*2) /2;
  fc= log(t/c) / log(2);
  print $0, fc;
 }
}
' > temp-2
###how many identical logFC
cat temp-2 | cut -f 6 | sort | uniq -c | awk '$1 > 2'
cat temp-2 | awk 'NR > 1' | sort -t '       ' +5 -6g | tail -n 20
wl=`cat temp-2 | awk 'NR > 1' | wc -l | awk '{print $1}'`
echo $wl
cat temp-2 | awk 'NR > 1' | sort -t '	' +5 -6g | awk '
{
 print $0 "\t" NR "\t"  1- NR/'$wl';
}
' > temp-3 
echo "geneID	rank" > temp-4
cat temp-3 | cut -f 1,8 >> temp-4
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine    temp-4 M10.geneID-name-chr-type.2.name-first.txt out
paste    temp-4  out | grep -vw notApplicable | awk 'BEGIN {FS = "\t"; OFS = "\t"; ORS = ""}
{
print $5;
for(i = 1; i <= NF; i++)
{
 if(i != 5)
 {
  print "\t" $i;
 }
}
print "\n"
}' > temp-4.tum.geneID.txt
/Users/linyongmao/Documents/microglia/scrnaseq-metaannot-combine   temp-4.tum.geneID.txt Mouse_ENSEMBL_Gene_ID_Human_Orthologs_MSigDB.v7.4.chip out
paste   temp-4.tum.geneID.txt  out | grep -vw notApplicable  > temp-5
cat temp-5 | awk 'BEGIN {FS = "\t"; OFS = "\t"; ORS = ""}
NR > 1 {print $9,$3,$10 "\n"}' > mouse-female-logFC-rank-scRNA-edgeR

##SERBP1	0.170076	SERPINE1 mRNA binding protein 1 [Source:HGNC Symbol;Acc:HGNC:17860]
./make-rnk-genesymble.logFC mouse-female-logFC-rank-scRNA-edgeR mouse-female-logFC-rank-scRNA-edgeR.combDupGenes

#############################################################################
# F vs M t-test mouse scRNA-seq
f <- read.delim("mouse-female-logFC-rank-scRNA-edgeR.combDupGenes", header=F)
m <- read.delim("mouse-male-logFC-rank-scRNA-edgeR.combDupGenes", header=F)
paths <- read.delim("temp-path-files", header=F)
sink("temp-res.txt")
str <- paste("pathway", "female-rank-mean", "male-rank-mean", "mean diff (f-m)", "numOfUnionDEGS", "t-test p-value", sep = "\t" )
cat(str)
cat("\n")
for(i in 1:dim(paths)[1]) {
 genes <- read.delim(file=paths[i,1], header=F)
 f.rnk <- f[ f$V1 %in% genes$V1, ]$V2
 m.rnk <- m[ m$V1 %in% genes$V1, ]$V2
 res <- t.test(f.rnk, m.rnk)

 m1 <- mean(f.rnk, na.rm=T)
 m2 <- mean(m.rnk, na.rm=T)
 str <- paste(paths[i,1],m1,m2,m1-m2,length(f.rnk), res$p.value, sep = "\t" )
 cat(str)
 cat("\n")
}

sink()

###paired t-test
f <- read.delim("mouse-female-logFC-rank-scRNA-edgeR.combDupGenes", header=F)
m <- read.delim("mouse-male-logFC-rank-scRNA-edgeR.combDupGenes", header=F)
paths <- read.delim("temp-path-files", header=F)
sink("temp-res.txt")
str <- paste("pathway", "female-rank-mean", "male-rank-mean", "mean diff (f-m)", "numOfAllexpressedGenesF-MIntersect", "paired t-test p-value", sep = "\t" )
cat(str)
cat("\n")
for(i in 1:dim(paths)[1]) {
genes <- read.delim(file=paths[i,1], header=F)
 f.rnk <- f[ f$V1 %in% genes$V1, ]
 m.rnk <- m[ m$V1 %in% genes$V1, ]
t2 <- merge(f.rnk, m.rnk, by.x = "V1", by.y= "V1")
res <- t.test(t2$V2.x, t2$V2.y, paired=T)

 m1 <- mean(t2$V2.x, na.rm=T)
 m2 <- mean(t2$V2.y, na.rm=T)
 str <- paste(paths[i,1],m1,m2,m1-m2,dim(t2)[1], res$p.value, sep = "\t" )
 cat(str)
 cat("\n")
}

sink()

###using gene ranks that are based edgeR signed log10 p-values; vs logFC of medians(cpm+0.01) of two groups derived gene ranks
file <- read.delim("/Users/linyongmao/gsea_home/output/microgliaSex/mouse.clusts.micro.female.edgeR_TAM.prerank_p.v7.4.GseaPreranked.1658354084959/HALLMARK_E2F_TARGETS.tsv")
f <- file$RANK.IN.GENE.LIST / 10037
file <- read.delim("/Users/linyongmao/gsea_home/output/microgliaSex/mouse.clusts.micro.male.edgeR_TAM.prerank_p.v7.4.GseaPreranked.1658355450441/HALLMARK_E2F_TARGETS.tsv")
m <- file$RANK.IN.GENE.LIST / 10001
t.test(f,m)
###probably wilcox test more robust, median of ttest and ks test
wilcox.test(f,m)
ks.test(f,m)


#############################################################################
# sex:tumor interaction, mouse scRNA-seq 
group <- factor(rep(1, 8))
y <- DGEList(counts=t1,group=group)
y <- calcNormFactors(y)
keep <-rowSums(edgeR::cpm(y)>=1) >= 4
y<-y[keep,]
dim(y)
# 11032     8
des1 <- c("f", "f", "f", "f", "m","m","m","m")
des2 <- c("c", "c", "t", "t", "c", "c", "t", "t")
design <- model.matrix(~des1 + des2 + des1 : des2)
y <- estimateDisp(y,design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef=4)
top2v1 <- topTags(qlf, n = 91234)
write.table(top2v1, "diff2-1.txt", sep="\t", quote = F)
topTags(qlf, n = 10)
# Coefficient:  des1m:des2t
#               logFC   logCPM        F       PValue       FDR
# Ifitm2   -1.4925433 4.962871 53.30529 3.215702e-05 0.3547562
# Fn1      -3.3368331 1.670871 30.13782 3.055510e-04 0.8827167
# Dab2     -1.1156088 3.846605 30.11171 3.065431e-04 0.8827167
#

ls -l mouse.clusts.micro.sex-tum-interaction.diff2-1.edgeR.human.gene.rnk 
cat mouse.clusts.micro.sex-tum-interaction.diff2-1.edgeR.human.gene.rnk |awk 'BEGIN {FS = "\t"; OFS = "\t"} {print $1, (-1)*$2 } ' > mouse.clusts.micro.sex-tum-interaction.diff2-1.edgeR.human.gene.2.rnk
bash /Users/linyongmao/Documents/GSEA_4.1.0/gsea-cli.sh  GSEAPreranked -gmx   /Users/linyongmao/Documents/h.all.v7.4.symbols.gmt    -collapse No_Collapse -mode Max_probe -norm meandiv  -nperm 1000 -rnk  mouse.clusts.micro.sex-tum-interaction.diff2-1.edgeR.human.gene.2.rnk  -rpt_label   "mouse.clusts.micro.sex-tum-interaction.edgeR_TAM.prerank.v7.4"  -create_svgs false -include_only_symbols true   -make_sets true -plot_top_x 1234567 -rnd_seed 1234 -set_max 500  -zip_report false -out  "/Users/linyongmao/gsea_home/output/microgliaSex"

#############################################################################
### mouse scRNA-seq gene pseudobulk boxplot
        f-ctrl-1  f-ctrl-2 f-tumor-1 f-tumor-2  m-ctrl-1 m-ctrl-2 m-tumor-1 m-tumor-2
Ifitm2  6.176391  6.401068  67.05913  64.79243  9.938551 13.12179  47.04231  39.19691
t2 <- edgeR::cpm(y)[c("Myc", "Ifitm2"),][2,]

df <- data.frame(log2_cpm = log2(t2), sex = des1, tumor = des2)
df$group <- paste(df$sex, df$tumor, sep="_")
for(i in 1:dim(df)[1])
{
 if(df$sex[i] == "f" & df$tumor[i] == "t")
   df$group[i] = "Female Tumor"
 else if(df$sex[i] == "f" & df$tumor[i] == "c")
   df$group[i] = "Female Ctrl"
 else if(df$sex[i] == "m" & df$tumor[i] == "c")
   df$group[i] = "Male Ctrl"
 else if(df$sex[i] == "m" & df$tumor[i] == "t")
   df$group[i] = "Male Tumor"
 else
   temp=1
}

boxplot(df$log2_cpm ~ df$group, xlab="", ylab="log2(cpm)", outcol="white")
beeswarm(df$log2_cpm ~ df$group,  pch = c(1,1,2,2), col = c("green", "red", "green", "red" ), cex = 1, add = T )
abline(h = seq(-100,100,0.5), lty = 5, lwd = 0.5, col = "gray")
tex="mouse scRNA  pseudobulk \n Ifitm2"
title(tex)

res <- lm(log2(t2) ~ des1 + des2 + des1 * des2)
summary(res)

#############################################################################
f1="/Users/linyongmao/gsea_home/output/microgliaSex/mouse.clusts.micro.sex-tum-interaction.edgeR_TAM.prerank.v7.4.GseaPreranked.1659319902010/gsea_report_for_na_neg_1659319902010.tsv"
f2="/Users/linyongmao/gsea_home/output/microgliaSex/mouse.clusts.micro.sex-tum-interaction.edgeR_TAM.prerank.v7.4.GseaPreranked.1659319902010/gsea_report_for_na_pos_1659319902010.tsv"
cat "$f1" > temp-1
cat "$f2" | awk 'NR > 1' >> temp-1
cat temp-1 | cut -f 1,4,5,6,7,8  > temp-2
vi temp-2 

f1="/Users/linyongmao/gsea_home/output/microgliaSex/mouse.clusts.micro.male.edgeR_TAM.prerank_p.v7.4.GseaPreranked.1658355450441/gsea_report_for_na_pos_1658355450441.tsv"
f2="/Users/linyongmao/gsea_home/output/microgliaSex/mouse.clusts.micro.male.edgeR_TAM.prerank_p.v7.4.GseaPreranked.1658355450441/gsea_report_for_na_neg_1658355450441.tsv"
cat "$f1" > temp-1
cat "$f2" | awk 'NR > 1' >> temp-1
cat temp-1 | cut -f 1,4,5,6,7,8  > temp-2

f1="/Users/linyongmao/gsea_home/output/microgliaSex/mouse.clusts.micro.female.edgeR_TAM.prerank_p.v7.4.GseaPreranked.1658354084959/gsea_report_for_na_pos_1658354084959.tsv"
f2="/Users/linyongmao/gsea_home/output/microgliaSex/mouse.clusts.micro.female.edgeR_TAM.prerank_p.v7.4.GseaPreranked.1658354084959/gsea_report_for_na_neg_1658354084959.tsv"
cat "$f1" > temp-1
cat "$f2" | awk 'NR > 1' >> temp-1
cat temp-1 | cut -f 1,4,5,6,7,8  > temp-2
vi temp-2

#############################################################################
### pathway level z-score;
immune.combined <- readRDS("immune.combined.rds")
mic <- c(0:5,7,9,14)
immune.mic <- immune.combined[, immune.combined$integrated_snn_res.0.6 %in% mic] ###5748 cells in cluster 0
immune.mic
# 16618 features across 31165 (out of 40401) samples within 2 assays
counts <- immune.mic@assays$RNA@counts
metadata <- immune.mic@meta.data
metadata$cluster_id <- metadata$integrated_snn_res.0.6
# Create single cell experiment object
sce <- SingleCellExperiment(assays = list(counts = counts),
                           colData = metadata)
# Identify groups for aggregation of counts
# groups: character class
groups <- colData(sce)[, c("orig.ident")]
# Aggregate across cluster-sample groups
pb <- aggregate.Matrix(t(counts(sce)),
                       groupings = groups, fun = "sum")

class(pb)

dim(pb)
# [1]     8 14618
t1 <- as.data.frame(t(pb))
head(t1)
dim(t1)
group <- factor(rep(1, 8))
y <- DGEList(counts=t1,group=group)
y <- calcNormFactors(y)

keep <-rowSums(edgeR::cpm(y)>=1) >= 4
y<-y[keep,]
dim(y)
# 11032     8
d = edgeR::cpm(y)
a <- d
b = log10(a+1)
for(i in 1:dim(b)[1])
{
 a[i, ] <- (b[i, ] - mean(as.numeric(b[i,]))) / var(as.numeric(b[i,]))^(1/2)
}
###a is z-score of log10(cpm+1)
head(a)
#                f-ctrl-1   f-ctrl-2  f-tumor-1  f-tumor-2   m-ctrl-1    m-ctrl-2  m-tumor-1  m-tumor-2
# Mrpl15        -0.1030297 -0.9063680  0.2181332  0.4909031 -0.3570053 -1.64152623  0.6940354  1.6048575
# Lypla1        -0.8168726  0.2955806 -0.2745238 -0.2532889  0.2742311  0.08644561  2.0451242 -1.3566962

a.df <- as.data.frame(a)
a.df$id <- row.names(a.df)
g <- read.delim("M10.geneID.Human_Orthologs_MSigDB.v7.4.txt")
a2 <- merge(a.df, g, by.x="id", by.y="geneID")
write.table(a2$Gene.Symbol, "temp-1", quote=F, sep="\t")
system("cat temp-1 | cut -f 2 | sort | uniq -c | awk '$1 <= 6' | sed 's/^ *[0-9][0-9]* *//' > temp-2")
g3 <- read.delim("temp-2", header=F)
a5 <- a2[ a2$Gene.Symbol %in% g3$V1, ]
dim(a5)
# [1] 10049    16
paths <- read.delim("temp-path-files", header=F)
i = 25 #inflamm pathway
 genes <- read.delim(file=paths[i,1], header=F)
 p.g <- a5[ a5$Gene.Symbol %in% genes$V1, ]
 mat <- as.matrix(p.g[, 2:9])
 res <- data.frame(id = colnames(mat), mean = colMeans(mat))
res$group <- res$id
res$group <- gsub("-1", "", res$group)
res$group <- gsub("-2", "", res$group)
boxplot(res$mean ~ res$group, xlab = "", ylab = "z-score avg of all genes")
beeswarm(res$mean ~ res$group, pch = c(16,16,17,17), col = c("green", "red", "green", "red" ), cex = 2, add = T)
abline(h = seq(-10,10,0.05), lty = 5, lwd = 0.5, col = "gray")
title(main=paste(length(mic), "microglia", "clusters (mouse scRNA)\n", gsub("../microglia/", "", paths[i,1])))
t1 <- res[res$group == "f-ctrl",]
text(1, t1$mean, t1$id, pos = 4, cex = 0.5, col = "black")
t1 <- res[res$group == "f-tumor",]
text(2, t1$mean, t1$id, pos = 4, cex = 0.5, col = "black")
t1 <- res[res$group == "m-ctrl",]
text(3, t1$mean, t1$id, pos = 4, cex = 0.5, col = "black")
t1 <- res[res$group == "m-tumor",]
text(4, t1$mean, t1$id, pos = 4, cex = 0.5, col = "black")

#############################heatmap for a set of genes#####
genes <- scan(what="", sep = "\n")
p.g <- a5[ a5$Gene.Symbol %in% genes, ]
p.g$"f-ctrl" <- ( p.g$"f-ctrl-1" + p.g$"f-ctrl-2")/2
p.g$"f-tumor" <- ( p.g$"f-tumor-1" + p.g$"f-tumor-2")/2
p.g$"m-ctrl" <- ( p.g$"m-ctrl-1" + p.g$"m-ctrl-2")/2
p.g$"m-tumor" <- ( p.g$"m-tumor-1" + p.g$"m-tumor-2")/2
p.g.1 <- p.g[, 17:20]
rownames(p.g.1) <- p.g$id
mat <- as.matrix(p.g.1)
Heatmap(matrix=mat, name="z-score", cluster_columns=F, row_names_gp = gpar(fontsize = 5.0))

#############################heatmap for a set of genes (human mg data)#####
p.g.mouse <- p.g
# a is z-score of log10(cpm+1)
# mg 39 samples gene level z-score, mean of each group (XX-ctrl, XX-TAM,..)
a.df.g <- merge(a.df, g, by.x="id", by.y="geneID")
head(a.df.g)
info <- read.delim("../microglia/microglia-39-sample-sampInfo.txt")
a8 <- a.df.g[ a.df.g$name %in% genes, ] ###genes a set of genes (e.g. NF-kB members + DDX3X)
info$group <- paste(info$XX, info$Tumor, sep="_")
sort(unique(info$group))
# [1] "XX_Control" "XX_Tumor"   "XY_Control" "XY_Tumor"  
g5 <- sort(unique(info$group))
c1 = numeric()
c2 = numeric()
c3 = numeric()
c4 = numeric()
for(i in 2:40) ###a8 column sample ID - group
{
 id <- colnames(a8)[i]
 gr <- info[ info$id1 == id,]$group
 if(gr == "XX_Control")
   c1 <- c(c1, i)
 else if (gr == "XX_Tumor")
   c2 <- c(c2, i)
 else if (gr == "XY_Control")
   c3 <- c(c3, i)
 else if (gr == "XY_Tumor")
   c4 <- c(c4, i)
 else
   c5 = ""
} 

a8$"human-f-ctrl" = 1
a8$"human-f-tumor" = 1
a8$"human-m-ctrl" = 1
a8$"human-m-tumor" = 1
for(i in 1:dim(a8)[1])
{
 a8$"human-f-ctrl"[i]  = mean(as.numeric(a8[i,c1]))
 a8$"human-f-tumor"[i] = mean(as.numeric(a8[i,c2]))
 a8$"human-m-ctrl"[i]  = mean(as.numeric(a8[i,c3]))
 a8$"human-m-tumor"[i] = mean(as.numeric(a8[i,c4]))
}
a9 <- a8[,42:45]
rownames(a9) <- a8$name
mat <- as.matrix(a9)
a9$name <- a8$name
a10 <- merge(a9, p.g.mouse, by.x="name", by.y="Gene.Symbol")
a11 <- a10[, c(2:5, 21:24)]
rownames(a11) <- paste(a10$name, a10$id, sep="_")
mat <- as.matrix(a11)
Heatmap(matrix=mat, name="z-score", cluster_columns=F, )
h.m <- c(rep("human", 4), rep("mouse",4))
Heatmap(matrix=mat, name="z-score", cluster_columns=F, column_split=h.m)

###barplot NES of human, mouse, interaction
cat temp-1
id      mouse   human
sex : tumor interaction 1.679   2.343
Male tumor vs ctrl      1.996   1.658
Female tumor vs ctrl    2.005   2.444

t1 <- read.delim("temp-1", row.names=1)
barplot(as.matrix( t1), horiz=T, beside=T, xlim=c(0,3), xlab="GSEA NES",  col=c("grey","green", "red"), main ="HALLMARK_INFLAMMATORY_RESPONSE")
legend("bottomright", rev(rownames(t1)), fill=rev(c( "grey", "green", "red")), cex = 0.8, inset=0.02)
abline(v = seq(0,3,0.5), lty = 5, lwd = 0.5, col = "gray")

#############################################################################
#########all cells in scRNA, all CD11b+ populations
> keep <-rowSums(edgeR::cpm(y)>=1) >= 4
> y<-y[keep,]
> dim(y)
[1] 11535     8

###$samples
          group lib.size norm.factors
f-ctrl-1      1 11282149    1.1076945
f-ctrl-2      1 11484539    1.1158320
f-tumor-1     1 17008502    0.9084570
f-tumor-2     1 15620489    0.9403983
m-ctrl-1      1  9949507    1.1079039
m-ctrl-2      1 11113173    1.0956012
m-tumor-1     1 14852877    0.8650514
m-tumor-2     1 14459209    0.9019210

cat mouse.allcells40401.sex-tum-interaction.diff2-1.edgeR.human.gene.rnk | awk 'BEGIN {FS = "\t"; OFS = "\t"} {print $1, (-1)*$2 } ' >  mouse.allcells40401.sex-tum-interaction.diff2-1.edgeR.human.gene.2.rnk

#############################################################################
###pca plot  of microglia-9-clusters
keep <-rowSums(edgeR::cpm(y)>=1) >= 4
y<-y[keep,]
dim(y)
# 11032     8
mds <- plotMDS(y, top=98765)
x <- cbind( colnames(y$counts), mds$x, mds$y)
x <- as.data.frame(x)
pca.info <- x
plot(pca.info$V2, pca.info$V3, cex=0.05, xlab="PC1 (66%)", ylab = "PC2 (12%)")
points(pca.info[ pca.info$V1 == "f-ctrl-1" | pca.info$V1 == "f-ctrl-2",]$V2, pca.info[ pca.info$V1 == "f-ctrl-1" | pca.info$V1 == "f-ctrl-2",]$V3, col = "green", pch = 16 , cex = 1.6)
points(pca.info[ pca.info$V1 == "f-tumor-1" | pca.info$V1 == "f-tumor-2",]$V2, pca.info[ pca.info$V1 == "f-tumor-1" | pca.info$V1 == "f-tumor-2",]$V3, col = "red", pch = 16 , cex = 1.6)
points(pca.info[ pca.info$V1 == "m-ctrl-1" | pca.info$V1 == "m-ctrl-2",]$V2, pca.info[ pca.info$V1 == "m-ctrl-1" | pca.info$V1 == "m-ctrl-2",]$V3, col = "green", pch = 17 , cex = 1.6)
points(pca.info[ pca.info$V1 == "m-tumor-1" | pca.info$V1 == "m-tumor-2",]$V2, pca.info[ pca.info$V1 == "m-tumor-1" | pca.info$V1 == "m-tumor-2",]$V3, col = "red", pch = 17 , cex = 1.6)
legend(0,0.2, c("XX control", "XX tumor", "XY control", "XY tumor"), pch=c(16,16,17,17), col = c("green", "red", "green", "red" ))
abline(h = seq(-1,1,0.1), lty = 5, lwd = 0.5, col = "gray")
abline(v = seq(-1,1,0.1), lty = 5, lwd = 0.5, col = "gray")
pca.info$group = pca.info$V1
pca.info$group <- gsub("-1", "", pca.info$group)
pca.info$group <- gsub("-2", "", pca.info$group)
boxplot(as.numeric( pca.info$V2) ~ pca.info$group, xlab="", ylab = "PC1 (66%)")
beeswarm(as.numeric( pca.info$V2) ~ pca.info$group, pch = c(16,16,17,17), col = c("green", "red", "green", "red" ), cex = 2, add = T)
abline(h = seq(-1,1,0.1), lty = 5, lwd = 0.5, col = "gray")

#############################################################################
###gene-gene correlation over female samples, male samples
keep <-rowSums(edgeR::cpm(y)>=1) >= 4 
y<-y[keep,]
dim(y)
# 11032     8 
d = edgeR::cpm(y)
a <- log2(d+1)
head(a)
a.df <- as.data.frame(a)
a.df$id <- row.names(a.df)
g <- read.delim("M10.geneID.Human_Orthologs_MSigDB.v7.4.txt")
a2 <- merge(a.df, g, by.x="id", by.y="geneID")
write.table(a2$Gene.Symbol, "temp-1", quote=F, sep="\t")
system("cat temp-1 | cut -f 2 | sort | uniq -c | awk '$1 <= 6' | sed 's/^ *[0-9][0-9]* *//' > temp-2")
g3 <- read.delim("temp-2", header=F)
a5 <- a2[ a2$Gene.Symbol %in% g3$V1, ]
dim(a5)
# [1] 10049    16
genes <- scan(what="", sep = "\n")
a6 <- a5[ a5$Gene.Symbol %in% genes, ]
sink("temp.2.txt")
str <- paste("mouseID", "human", "mID2", "human2", "f-r","f-p", "m-r","m-p", "a-r", "a-p", "gene-title",  "mouse-chr", "type", "known", "id", 
 "gene-title",  "mouse-chr", "type", "known", "id", sep="\t")
cat(str)
cat("\n")
for(i in 1:dim(a6)[1]) {
 for(j in 1:dim(a6)[1]) {
t1 <- cor.test(as.numeric(a6[i,2:9]), as.numeric(a6[j,2:9]))
t2 <- cor.test(as.numeric(a6[i,2:5]), as.numeric(a6[j,2:5]))
t3 <- cor.test(as.numeric(a6[i,6:9]), as.numeric(a6[j,6:9]))
corRes <- paste(a6[i,]$id, a6[i,]$"Gene.Symbol", a6[j,]$id, a6[j,]$"Gene.Symbol", 
 round(t2$estimate, digits = 2), format(t2$p.value, digits = 3), 
 round(t3$estimate, digits = 2) , format(format(t3$p.value, digits = 3), digits = 3), round(t1$estimate , digits = 2) , format(format(t1$p.value, digits = 3), digits = 3),
 a6[i,]$"Gene.Title", a6[i,]$chr, a6[i,]$type, a6[i,]$known, a6[i,]$ID,
 a6[j,]$"Gene.Title", a6[j,]$chr, a6[j,]$type, a6[j,]$known, a6[j,]$ID,sep = "\t")
cat(corRes)
cat("\n")
}
}
sink()
